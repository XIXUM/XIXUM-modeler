/*
 * generated by Xtext 2.16.0
 */
package org.xixum.modeler.spelling.ui.labeling

import com.google.inject.Inject
import org.xixum.modeler.spelling.nLX.NLXPackage
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.editor.model.XtextDocument
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import org.eclipse.jface.viewers.StyledString
import org.xixum.modeler.spelling.nLX.Word
import org.xixum.modeler.spelling.nLX.ItWord
import org.xixum.modeler.spelling.nLX.IgnoredText
import org.xixum.modeler.spelling.nLX.UrlAdress
import org.xixum.modeler.spelling.nLX.MailAdress
import org.xixum.modeler.spelling.nLX.Unit
import org.xixum.modeler.spelling.nLX.Symbols
import org.xixum.modeler.spelling.nLX.ShortCut
import org.xixum.modeler.spelling.nLX.EString
import org.xixum.modeler.spelling.nLX.Elements

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class NaturalLangLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	override Object text(Object element) {
		if (element instanceof EObject) {
			return element.eClass.name;
		}
		if (element instanceof XtextDocument) {
			return element.resourceURI.path;
		}
		super.text(element);
	}

	def Object text(EObject element) {
		var styledText = new StyledString(element.eClass.name)
		styledText.append(": ");
		switch (element){
			IgnoredText | UrlAdress | MailAdress : {
				var labelFeature = getLabelFeature(element.eClass());
				if (labelFeature !== null) {
					
					return styledText.append(convertToStyledString(element.eGet(labelFeature))?:convertToStyledString(""));
				}
			}
			Word:{
				
				var String word = IterableExtensions.join(element.word, "");
				return styledText.append(word);
			}
			ItWord : {
				var String word = IterableExtensions.join(element.word, "");
				return styledText.append(word);
			}
			Symbols: {
			 	styledText.append(element.symbol)
			}
			EString: {
				styledText.append(IterableExtensions.join(element.word, ""))
			}
			Unit: {	
				var String value = IterableExtensions.join(element.value, "");
				styledText.append(value);
				if (!element.unit?.empty)
					styledText.append(" | ")
					styledText.append(element.unit ?: String.join(" ", element.value))
			}
//			ShortCut: {
//				element.shortcut
//			}
			Elements: {
				var labelFeature = getLabelFeature(element.eClass());
				if (labelFeature !== null) {
					var styledS = convertToStyledString(element.eGet(labelFeature))
					return styledText.append(if (styledS !== null) styledS.toString else "");
				}
			}
			default: element.eClass.name
		}
	}

}
