/*
 * generated by Xtext 2.33.0
 */
package org.xixum.modeler.spelling.ui;

import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.jface.text.rules.ITokenScanner;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.eclipse.ui.views.contentoutline.IContentOutlinePage;
import org.eclipse.ui.views.properties.IPropertySourceProvider;
import org.eclipse.xtext.builder.debug.IBuildLogger;
import org.eclipse.xtext.ui.codetemplates.ui.highlighting.TokenToAttributeMapper;
import org.eclipse.xtext.ui.editor.embedded.EmbeddedEditorFactory;
import org.eclipse.xtext.ui.editor.hover.AnnotationWithQuickFixesHover;
import org.eclipse.xtext.ui.editor.model.TerminalsTokenTypeToPartitionMapper;
import org.eclipse.xtext.ui.editor.model.XtextDocument;
import org.eclipse.xtext.ui.editor.model.XtextDocumentProvider;
import org.eclipse.xtext.ui.editor.outline.actions.IOutlineContribution;
import org.eclipse.xtext.ui.editor.outline.actions.OutlineWithEditorLinker;
import org.eclipse.xtext.ui.editor.quickfix.XtextQuickAssistProcessor;
import org.eclipse.xtext.ui.editor.reconciler.IReconcileStrategyFactory;
import org.eclipse.xtext.ui.editor.reconciler.XtextSpellingReconcileStrategy;
import org.eclipse.xtext.ide.editor.syntaxcoloring.DefaultAntlrTokenToAttributeIdMapper;
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightingConfiguration;
import org.xixum.modeler.spelling.nlx.util.NlxAdapterFactory;
import org.xixum.modeler.spelling.nlx2.provider.NlxItemProviderAdapterFactory;
import org.xixum.modeler.spelling.ui.AbstractNLXUiModule;
import org.xixum.modeler.spelling.ui.editor.NlxBuildConsole;
import org.xixum.modeler.spelling.ui.editor.NlxEObjectNodeAdapterFactory;
import org.xixum.modeler.spelling.ui.editor.hover.NlxAnnotationWithQuickFixesHover;
import org.xixum.modeler.spelling.ui.editor.model.NlxDocument;
import org.xixum.modeler.spelling.ui.editor.model.NlxDocumentProvider;
import org.xixum.modeler.spelling.ui.editor.property.NlxLinkWithEditorOutlineContribution;
import org.xixum.modeler.spelling.ui.editor.property.NlxOutlineWithEditorLinker;
import org.xixum.modeler.spelling.ui.highlighting.NaturalLangHighlightingConfiguration;
import org.xixum.modeler.spelling.ui.highlighting.NlxAntlrTokenToAttributeIdMapper;
import org.xixum.modeler.spelling.ui.highlighting.NlxTerminalsTokenTypeToPartitionMapper;
import org.xixum.modeler.spelling.ui.highlighting.NlxTokenScanner;
import org.xixum.modeler.spelling.ui.highlighting.NlxTokenToAttributeMapper;
import org.xixum.modeler.spelling.ui.outline.NlxOutlinePage;
import org.xixum.modeler.spelling.ui.quickfix.NlxQuickAssistProcessor;
import org.eclipse.emf.common.notify.AdapterFactory;

import com.google.inject.Binder;
import com.google.inject.binder.LinkedBindingBuilder;
import com.google.inject.name.Names;

/**
 * Use this class to register components to be used within the Eclipse IDE.
 */
public class NLXUiModule extends AbstractNLXUiModule {

	public NLXUiModule(AbstractUIPlugin plugin) {
		super(plugin);
	}
	
//	Class <? extends XtextSpellingReconcileStrategy> bindXtextSpellingReconcileStrategy(){
//		return NlxSpellingReconcileStrategy.class;
//	}
	
	@Override
	public void configureSpellChecker(Binder binder) {
		binder.bind(IReconcileStrategyFactory.class).annotatedWith(Names.named("spellChecker")) //$NON-NLS-1$
		.to(NlxSpellingReconcileStrategy.Factory.class);
	}
	
	
	public Class<? extends TokenToAttributeMapper> bindTokenToAttributeMapper() {
		return NlxTokenToAttributeMapper.class;
	}

	public Class<? extends TerminalsTokenTypeToPartitionMapper> bindTerminalsTokenTypeToPartitionMapper() {
		return NlxTerminalsTokenTypeToPartitionMapper.class;
	}

	public Class<? extends IHighlightingConfiguration> bindIHighlightingConfiguration() {
		return NaturalLangHighlightingConfiguration.class;
	}

	public Class<? extends DefaultAntlrTokenToAttributeIdMapper> bindDefaultAntlrTokenToAttributeIdMapper() {
		return NlxAntlrTokenToAttributeIdMapper.class;
	}

	public Class<? extends IPropertySourceProvider> bindIPropertySourceProvider() {
		return NlxEObjectNodeAdapterFactory.class;
	}

	public void configureNaturalLangItemProviderAdapterFactory(final Binder binder) {
		ComposedAdapterFactory eObjectAdapterFactory = new ComposedAdapterFactory(
				ComposedAdapterFactory.Descriptor.Registry.INSTANCE);
		NlxItemProviderAdapterFactory _naturalLangItemProviderAdapterFactory = new NlxItemProviderAdapterFactory();
		eObjectAdapterFactory.addAdapterFactory(_naturalLangItemProviderAdapterFactory);
		binder.<AdapterFactory>bind(AdapterFactory.class).annotatedWith(Names.named("EObjectAdapterFactory"))
				.toInstance(eObjectAdapterFactory);
		LinkedBindingBuilder<AdapterFactory> _annotatedWith = binder.<AdapterFactory>bind(AdapterFactory.class)
				.annotatedWith(Names.named("nlxAdapterFactory"));
		NlxAdapterFactory _naturalLangAdapterFactory = new NlxAdapterFactory();
		_annotatedWith.toInstance(_naturalLangAdapterFactory);
	}

	@Override
	public Class<? extends ITokenScanner> bindITokenScanner() {
		return NlxTokenScanner.class;
	}

	public Class<? extends IBuildLogger> bindIBuildLogger() {
		return NlxBuildConsole.Logger.class;
	}

//	  public Class<? extends LogUtils> bindLogUtils() {
//	    return LogUtils.class;
//	  }

//	  public Class<? extends IDictionaryAccess> bindIDictionaryAccess() {
//	    return DictionaryAccess.class;
//	  }
//	  
//	  public Class<? extends EmbeddedEditorFactory.Builder> bindBuilder() {
//	    return NlxBuilder.class;
//	  }

	public Class<? extends OutlineWithEditorLinker> bindOutlineWithEditorLinker() {
		return NlxOutlineWithEditorLinker.class;
	}

	public Class<? extends XtextDocumentProvider> bindXtextDocumentProvider() {
		return NlxDocumentProvider.class;
	}

	public Class<? extends XtextDocument> bindXtextDocument() {
		return NlxDocument.class;
	}

	public Class<? extends AnnotationWithQuickFixesHover> bindAnnotationWithQuickFixesHover() {
		return NlxAnnotationWithQuickFixesHover.class;
	}

	public Class<? extends XtextQuickAssistProcessor> bindXtextQuickAssistProcessor() {
		return NlxQuickAssistProcessor.class;
	}

	@Override
	public Class<? extends IContentOutlinePage> bindIContentOutlinePage() {
		return NlxOutlinePage.class;
	}

	@Override
	public void configureToggleLinkWithEditorOutlineContribution(final Binder binder) {
		binder.<IOutlineContribution>bind(IOutlineContribution.class)
				.annotatedWith(IOutlineContribution.LinkWithEditor.class)
				.to(NlxLinkWithEditorOutlineContribution.class);
	}
	
}
