/*
 * generated by Xtext 2.33.0
 */
grammar InternalTexDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package org.xixum.latex.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xixum.latex.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xixum.latex.services.TexDslGrammarAccess;

}
@parser::members {
	private TexDslGrammarAccess grammarAccess;

	public void setGrammarAccess(TexDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getModelAccess().getDocumentAssignment()); }
			(rule__Model__DocumentAssignment)
			{ after(grammarAccess.getModelAccess().getDocumentAssignment()); }
		)
		(
			{ before(grammarAccess.getModelAccess().getDocumentAssignment()); }
			(rule__Model__DocumentAssignment)*
			{ after(grammarAccess.getModelAccess().getDocumentAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDocument
entryRuleDocument
:
{ before(grammarAccess.getDocumentRule()); }
	 ruleDocument
{ after(grammarAccess.getDocumentRule()); } 
	 EOF 
;

// Rule Document
ruleDocument 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDocumentAccess().getAlternatives()); }
		(rule__Document__Alternatives)
		{ after(grammarAccess.getDocumentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleText
entryRuleText
:
{ before(grammarAccess.getTextRule()); }
	 ruleText
{ after(grammarAccess.getTextRule()); } 
	 EOF 
;

// Rule Text
ruleText 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTextAccess().getTokenAssignment()); }
		(rule__Text__TokenAssignment)
		{ after(grammarAccess.getTextAccess().getTokenAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnyText
entryRuleAnyText
:
{ before(grammarAccess.getAnyTextRule()); }
	 ruleAnyText
{ after(grammarAccess.getAnyTextRule()); } 
	 EOF 
;

// Rule AnyText
ruleAnyText 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnyTextAccess().getAlternatives()); }
		(rule__AnyText__Alternatives)
		{ after(grammarAccess.getAnyTextAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getGroup()); }
		(rule__Command__Group__0)
		{ after(grammarAccess.getCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMulti
entryRuleMulti
:
{ before(grammarAccess.getMultiRule()); }
	 ruleMulti
{ after(grammarAccess.getMultiRule()); } 
	 EOF 
;

// Rule Multi
ruleMulti 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getMultiAccess().getTokensAssignment()); }
			(rule__Multi__TokensAssignment)
			{ after(grammarAccess.getMultiAccess().getTokensAssignment()); }
		)
		(
			{ before(grammarAccess.getMultiAccess().getTokensAssignment()); }
			(rule__Multi__TokensAssignment)*
			{ after(grammarAccess.getMultiAccess().getTokensAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommandExt
entryRuleCommandExt
:
{ before(grammarAccess.getCommandExtRule()); }
	 ruleCommandExt
{ after(grammarAccess.getCommandExtRule()); } 
	 EOF 
;

// Rule CommandExt
ruleCommandExt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandExtAccess().getGroup()); }
		(rule__CommandExt__Group__0)
		{ after(grammarAccess.getCommandExtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompound
entryRuleCompound
:
{ before(grammarAccess.getCompoundRule()); }
	 ruleCompound
{ after(grammarAccess.getCompoundRule()); } 
	 EOF 
;

// Rule Compound
ruleCompound 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompoundAccess().getAlternatives()); }
		(rule__Compound__Alternatives)
		{ after(grammarAccess.getCompoundAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExtras
entryRuleExtras
:
{ before(grammarAccess.getExtrasRule()); }
	 ruleExtras
{ after(grammarAccess.getExtrasRule()); } 
	 EOF 
;

// Rule Extras
ruleExtras 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getExtrasAccess().getTokensAssignment()); }
			(rule__Extras__TokensAssignment)
			{ after(grammarAccess.getExtrasAccess().getTokensAssignment()); }
		)
		(
			{ before(grammarAccess.getExtrasAccess().getTokensAssignment()); }
			(rule__Extras__TokensAssignment)*
			{ after(grammarAccess.getExtrasAccess().getTokensAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttributes
entryRuleAttributes
:
{ before(grammarAccess.getAttributesRule()); }
	 ruleAttributes
{ after(grammarAccess.getAttributesRule()); } 
	 EOF 
;

// Rule Attributes
ruleAttributes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributesAccess().getGroup()); }
		(rule__Attributes__Group__0)
		{ after(grammarAccess.getAttributesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDocumentAccess().getCommandParserRuleCall_0()); }
		ruleCommand
		{ after(grammarAccess.getDocumentAccess().getCommandParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDocumentAccess().getTextParserRuleCall_1()); }
		ruleText
		{ after(grammarAccess.getDocumentAccess().getTextParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getDocumentAccess().getGroup_2()); }
		(rule__Document__Group_2__0)
		{ after(grammarAccess.getDocumentAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyText__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnyTextAccess().getIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getAnyTextAccess().getIDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAnyTextAccess().getANY_OTHERTerminalRuleCall_1()); }
		RULE_ANY_OTHER
		{ after(grammarAccess.getAnyTextAccess().getANY_OTHERTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getAnyTextAccess().getKOMMATerminalRuleCall_2()); }
		RULE_KOMMA
		{ after(grammarAccess.getAnyTextAccess().getKOMMATerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getAnyTextAccess().getPIPETerminalRuleCall_3()); }
		RULE_PIPE
		{ after(grammarAccess.getAnyTextAccess().getPIPETerminalRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getAnyTextAccess().getEXCLTerminalRuleCall_4()); }
		RULE_EXCL
		{ after(grammarAccess.getAnyTextAccess().getEXCLTerminalRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getAnyTextAccess().getSYMBOLTerminalRuleCall_5()); }
		RULE_SYMBOL
		{ after(grammarAccess.getAnyTextAccess().getSYMBOLTerminalRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getAnyTextAccess().getDOTTerminalRuleCall_6()); }
		RULE_DOT
		{ after(grammarAccess.getAnyTextAccess().getDOTTerminalRuleCall_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives_2_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getPIPETerminalRuleCall_2_2_0_0()); }
		RULE_PIPE
		{ after(grammarAccess.getCommandAccess().getPIPETerminalRuleCall_2_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getEXCLTerminalRuleCall_2_2_0_1()); }
		RULE_EXCL
		{ after(grammarAccess.getCommandAccess().getEXCLTerminalRuleCall_2_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandExt__CommandAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandExtAccess().getCommandIDTerminalRuleCall_0_0_0()); }
		RULE_ID
		{ after(grammarAccess.getCommandExtAccess().getCommandIDTerminalRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandExtAccess().getCommandID_COMMTerminalRuleCall_0_0_1()); }
		RULE_ID_COMM
		{ after(grammarAccess.getCommandExtAccess().getCommandID_COMMTerminalRuleCall_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompoundAccess().getMultiParserRuleCall_0()); }
		ruleMulti
		{ after(grammarAccess.getCompoundAccess().getMultiParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompoundAccess().getExtrasParserRuleCall_1()); }
		ruleExtras
		{ after(grammarAccess.getCompoundAccess().getExtrasParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getCompoundAccess().getCommandExtParserRuleCall_2()); }
		(ruleCommandExt)
		{ after(grammarAccess.getCompoundAccess().getCommandExtParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extras__TokensAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtrasAccess().getTokensBOTerminalRuleCall_0_0()); }
		RULE_BO
		{ after(grammarAccess.getExtrasAccess().getTokensBOTerminalRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getExtrasAccess().getTokensBCTerminalRuleCall_0_1()); }
		RULE_BC
		{ after(grammarAccess.getExtrasAccess().getTokensBCTerminalRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributesAccess().getGroup_1_1_0()); }
		(rule__Attributes__Group_1_1_0__0)
		{ after(grammarAccess.getAttributesAccess().getGroup_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getAttributesAccess().getSingleAssignment_1_1_1()); }
		(rule__Attributes__SingleAssignment_1_1_1)
		{ after(grammarAccess.getAttributesAccess().getSingleAssignment_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Document__Group_2__0__Impl
	rule__Document__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocumentAccess().getDocumentAction_2_0()); }
	()
	{ after(grammarAccess.getDocumentAccess().getDocumentAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Document__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocumentAccess().getENDTerminalRuleCall_2_1()); }
	RULE_END
	{ after(grammarAccess.getDocumentAccess().getENDTerminalRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__0__Impl
	rule__Command__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getCommandAssignment_0()); }
	(rule__Command__CommandAssignment_0)
	{ after(grammarAccess.getCommandAccess().getCommandAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__1__Impl
	rule__Command__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getGroup_1()); }
	(rule__Command__Group_1__0)?
	{ after(grammarAccess.getCommandAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getGroup_2()); }
	(rule__Command__Group_2__0)?
	{ after(grammarAccess.getCommandAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_1__0__Impl
	rule__Command__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getSQBOTerminalRuleCall_1_0()); }
	RULE_SQBO
	{ after(grammarAccess.getCommandAccess().getSQBOTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_1__1__Impl
	rule__Command__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getAttrsAssignment_1_1()); }
	(rule__Command__AttrsAssignment_1_1)
	{ after(grammarAccess.getCommandAccess().getAttrsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_1__2__Impl
	rule__Command__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getGroup_1_2()); }
	(rule__Command__Group_1_2__0)*
	{ after(grammarAccess.getCommandAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getSQBCTerminalRuleCall_1_3()); }
	RULE_SQBC
	{ after(grammarAccess.getCommandAccess().getSQBCTerminalRuleCall_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_1_2__0__Impl
	rule__Command__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getKOMMATerminalRuleCall_1_2_0()); }
	RULE_KOMMA
	{ after(grammarAccess.getCommandAccess().getKOMMATerminalRuleCall_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getAttrsAssignment_1_2_1()); }
	(rule__Command__AttrsAssignment_1_2_1)
	{ after(grammarAccess.getCommandAccess().getAttrsAssignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_2__0__Impl
	rule__Command__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getCUBOTerminalRuleCall_2_0()); }
	RULE_CUBO
	{ after(grammarAccess.getCommandAccess().getCUBOTerminalRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_2__1__Impl
	rule__Command__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getTokensAssignment_2_1()); }
	(rule__Command__TokensAssignment_2_1)
	{ after(grammarAccess.getCommandAccess().getTokensAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_2__2__Impl
	rule__Command__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getGroup_2_2()); }
	(rule__Command__Group_2_2__0)*
	{ after(grammarAccess.getCommandAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getCUBCTerminalRuleCall_2_3()); }
	RULE_CUBC
	{ after(grammarAccess.getCommandAccess().getCUBCTerminalRuleCall_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_2_2__0__Impl
	rule__Command__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getAlternatives_2_2_0()); }
	(rule__Command__Alternatives_2_2_0)
	{ after(grammarAccess.getCommandAccess().getAlternatives_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getTokensAssignment_2_2_1()); }
	(rule__Command__TokensAssignment_2_2_1)
	{ after(grammarAccess.getCommandAccess().getTokensAssignment_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CommandExt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandExt__Group__0__Impl
	rule__CommandExt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandExt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandExtAccess().getCommandAssignment_0()); }
	(rule__CommandExt__CommandAssignment_0)
	{ after(grammarAccess.getCommandExtAccess().getCommandAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandExt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandExt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandExt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandExtAccess().getGroup_1()); }
	(rule__CommandExt__Group_1__0)
	{ after(grammarAccess.getCommandExtAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CommandExt__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandExt__Group_1__0__Impl
	rule__CommandExt__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandExt__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandExtAccess().getCUBOTerminalRuleCall_1_0()); }
	RULE_CUBO
	{ after(grammarAccess.getCommandExtAccess().getCUBOTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandExt__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandExt__Group_1__1__Impl
	rule__CommandExt__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandExt__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandExtAccess().getTokensAssignment_1_1()); }
	(rule__CommandExt__TokensAssignment_1_1)
	{ after(grammarAccess.getCommandExtAccess().getTokensAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandExt__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandExt__Group_1__2__Impl
	rule__CommandExt__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandExt__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandExtAccess().getGroup_1_2()); }
	(rule__CommandExt__Group_1_2__0)*
	{ after(grammarAccess.getCommandExtAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandExt__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandExt__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandExt__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandExtAccess().getCUBCTerminalRuleCall_1_3()); }
	RULE_CUBC
	{ after(grammarAccess.getCommandExtAccess().getCUBCTerminalRuleCall_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CommandExt__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandExt__Group_1_2__0__Impl
	rule__CommandExt__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandExt__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandExtAccess().getKOMMATerminalRuleCall_1_2_0()); }
	RULE_KOMMA
	{ after(grammarAccess.getCommandExtAccess().getKOMMATerminalRuleCall_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandExt__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandExt__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandExt__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandExtAccess().getTokensAssignment_1_2_1()); }
	(rule__CommandExt__TokensAssignment_1_2_1)
	{ after(grammarAccess.getCommandExtAccess().getTokensAssignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attributes__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attributes__Group__0__Impl
	rule__Attributes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributesAccess().getKeyAssignment_0()); }
	(rule__Attributes__KeyAssignment_0)
	{ after(grammarAccess.getAttributesAccess().getKeyAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attributes__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributesAccess().getGroup_1()); }
	(rule__Attributes__Group_1__0)?
	{ after(grammarAccess.getAttributesAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attributes__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attributes__Group_1__0__Impl
	rule__Attributes__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributesAccess().getEQTerminalRuleCall_1_0()); }
	RULE_EQ
	{ after(grammarAccess.getAttributesAccess().getEQTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attributes__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributesAccess().getAlternatives_1_1()); }
	(rule__Attributes__Alternatives_1_1)
	{ after(grammarAccess.getAttributesAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attributes__Group_1_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attributes__Group_1_1_0__0__Impl
	rule__Attributes__Group_1_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributesAccess().getCUBOTerminalRuleCall_1_1_0_0()); }
	RULE_CUBO
	{ after(grammarAccess.getAttributesAccess().getCUBOTerminalRuleCall_1_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attributes__Group_1_1_0__1__Impl
	rule__Attributes__Group_1_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAttributesAccess().getMultiAssignment_1_1_0_1()); }
		(rule__Attributes__MultiAssignment_1_1_0_1)
		{ after(grammarAccess.getAttributesAccess().getMultiAssignment_1_1_0_1()); }
	)
	(
		{ before(grammarAccess.getAttributesAccess().getMultiAssignment_1_1_0_1()); }
		(rule__Attributes__MultiAssignment_1_1_0_1)*
		{ after(grammarAccess.getAttributesAccess().getMultiAssignment_1_1_0_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attributes__Group_1_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributesAccess().getCUBCTerminalRuleCall_1_1_0_2()); }
	RULE_CUBC
	{ after(grammarAccess.getAttributesAccess().getCUBCTerminalRuleCall_1_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__DocumentAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getDocumentDocumentParserRuleCall_0()); }
		ruleDocument
		{ after(grammarAccess.getModelAccess().getDocumentDocumentParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Text__TokenAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTextAccess().getTokenAnyTextParserRuleCall_0()); }
		ruleAnyText
		{ after(grammarAccess.getTextAccess().getTokenAnyTextParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__CommandAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getCommandID_COMMTerminalRuleCall_0_0()); }
		RULE_ID_COMM
		{ after(grammarAccess.getCommandAccess().getCommandID_COMMTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__AttrsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getAttrsAttributesParserRuleCall_1_1_0()); }
		ruleAttributes
		{ after(grammarAccess.getCommandAccess().getAttrsAttributesParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__AttrsAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getAttrsAttributesParserRuleCall_1_2_1_0()); }
		ruleAttributes
		{ after(grammarAccess.getCommandAccess().getAttrsAttributesParserRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__TokensAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getTokensCompoundParserRuleCall_2_1_0()); }
		ruleCompound
		{ after(grammarAccess.getCommandAccess().getTokensCompoundParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__TokensAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getTokensCompoundParserRuleCall_2_2_1_0()); }
		ruleCompound
		{ after(grammarAccess.getCommandAccess().getTokensCompoundParserRuleCall_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multi__TokensAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiAccess().getTokensIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getMultiAccess().getTokensIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandExt__CommandAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandExtAccess().getCommandAlternatives_0_0()); }
		(rule__CommandExt__CommandAlternatives_0_0)
		{ after(grammarAccess.getCommandExtAccess().getCommandAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandExt__TokensAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandExtAccess().getTokensCompoundParserRuleCall_1_1_0()); }
		ruleCompound
		{ after(grammarAccess.getCommandExtAccess().getTokensCompoundParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandExt__TokensAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandExtAccess().getTokensCompoundParserRuleCall_1_2_1_0()); }
		ruleCompound
		{ after(grammarAccess.getCommandExtAccess().getTokensCompoundParserRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extras__TokensAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtrasAccess().getTokensAlternatives_0()); }
		(rule__Extras__TokensAlternatives_0)
		{ after(grammarAccess.getExtrasAccess().getTokensAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__KeyAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributesAccess().getKeyIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributesAccess().getKeyIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__MultiAssignment_1_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributesAccess().getMultiMultiParserRuleCall_1_1_0_1_0()); }
		ruleMulti
		{ after(grammarAccess.getAttributesAccess().getMultiMultiParserRuleCall_1_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__SingleAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributesAccess().getSingleIDTerminalRuleCall_1_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributesAccess().getSingleIDTerminalRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_SL_COMMENT : '%' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : (RULE_ALPHA|RULE_SYMBOL) (RULE_ALPHA|RULE_SYMBOL|RULE_NUMERIC|RULE_DOT|RULE_AND)*;

fragment RULE_BS : '\\';

RULE_ID_COMM : RULE_BS RULE_ID;

fragment RULE_ALPHA : (RULE_ALPHAC|RULE_ALPHAS|RULE_D_QUOTE|RULE_S_QUOTE);

fragment RULE_ALPHAC : ('A'..'Z'|'\u00C4'..'\u00DC'|'\u00C0'..'\u00D9'|'\u00C1'..'\u00DA');

fragment RULE_ALPHAS : ('a'..'z'|'\u00E4'..'\u00FC'|'\u00DF'|'\u00E0'..'\u00F9'|'\u00E1'..'\u00FA');

fragment RULE_NUMERIC : '0'..'9';

RULE_SQBO : '[';

RULE_SQBC : ']';

RULE_BO : '(';

RULE_BC : ')';

RULE_CUBO : '{';

RULE_CUBC : '}';

RULE_KOMMA : ',';

RULE_EQ : '=';

RULE_DOT : '.';

fragment RULE_AND : '&';

RULE_PIPE : '|';

RULE_EXCL : '!';

fragment RULE_SPACE : ' ';

RULE_SYMBOL : ('-'|'_'|'+'|'#'|'~');

fragment RULE_D_QUOTE : '"';

fragment RULE_S_QUOTE : '\'';

RULE_END : EOF;

RULE_WS : (RULE_SPACE|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
