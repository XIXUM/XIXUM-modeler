/*
 * generated by Xtext 2.33.0
 */
grammar InternalTexDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xixum.latex.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xixum.latex.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xixum.latex.services.TexDslGrammarAccess;

}
@parser::members {
	private TexDslGrammarAccess grammarAccess;

	public void setGrammarAccess(TexDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getDocumentAssignment()); }
		(rule__Model__DocumentAssignment)
		{ after(grammarAccess.getModelAccess().getDocumentAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDocument
entryRuleDocument
:
{ before(grammarAccess.getDocumentRule()); }
	 ruleDocument
{ after(grammarAccess.getDocumentRule()); } 
	 EOF 
;

// Rule Document
ruleDocument 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDocumentAccess().getAlternatives()); }
		(rule__Document__Alternatives)
		{ after(grammarAccess.getDocumentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleToken
entryRuleToken
:
{ before(grammarAccess.getTokenRule()); }
	 ruleToken
{ after(grammarAccess.getTokenRule()); } 
	 EOF 
;

// Rule Token
ruleToken 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTokenAccess().getTokenAssignment()); }
		(rule__Token__TokenAssignment)
		{ after(grammarAccess.getTokenAccess().getTokenAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleID_Token
entryRuleID_Token
:
{ before(grammarAccess.getID_TokenRule()); }
	 ruleID_Token
{ after(grammarAccess.getID_TokenRule()); } 
	 EOF 
;

// Rule ID_Token
ruleID_Token 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getID_TokenAccess().getAlternatives()); }
		(rule__ID_Token__Alternatives)
		{ after(grammarAccess.getID_TokenAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleID_WS
entryRuleID_WS
:
{ before(grammarAccess.getID_WSRule()); }
	 ruleID_WS
{ after(grammarAccess.getID_WSRule()); } 
	 EOF 
;

// Rule ID_WS
ruleID_WS 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getID_WSAccess().getGroup()); }
		(rule__ID_WS__Group__0)
		{ after(grammarAccess.getID_WSAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubCommName
entryRuleSubCommName
:
{ before(grammarAccess.getSubCommNameRule()); }
	 ruleSubCommName
{ after(grammarAccess.getSubCommNameRule()); } 
	 EOF 
;

// Rule SubCommName
ruleSubCommName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubCommNameAccess().getGroup()); }
		(rule__SubCommName__Group__0)
		{ after(grammarAccess.getSubCommNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommandName
entryRuleCommandName
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getCommandNameRule()); }
	 ruleCommandName
{ after(grammarAccess.getCommandNameRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CommandName
ruleCommandName 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandNameAccess().getGroup()); }
		(rule__CommandName__Group__0)
		{ after(grammarAccess.getCommandNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSubCommand
entryRuleSubCommand
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getSubCommandRule()); }
	 ruleSubCommand
{ after(grammarAccess.getSubCommandRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SubCommand
ruleSubCommand 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubCommandAccess().getGroup()); }
		(rule__SubCommand__Group__0)
		{ after(grammarAccess.getSubCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCommandParameters
entryRuleCommandParameters
:
{ before(grammarAccess.getCommandParametersRule()); }
	 ruleCommandParameters
{ after(grammarAccess.getCommandParametersRule()); } 
	 EOF 
;

// Rule CommandParameters
ruleCommandParameters 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandParametersAccess().getGroup()); }
		(rule__CommandParameters__Group__0)
		{ after(grammarAccess.getCommandParametersAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getGroup()); }
		(rule__Command__Group__0)
		{ after(grammarAccess.getCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttributes
entryRuleAttributes
:
{ before(grammarAccess.getAttributesRule()); }
	 ruleAttributes
{ after(grammarAccess.getAttributesRule()); } 
	 EOF 
;

// Rule Attributes
ruleAttributes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributesAccess().getGroup()); }
		(rule__Attributes__Group__0)
		{ after(grammarAccess.getAttributesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		(
			{ before(grammarAccess.getDocumentAccess().getElementsAssignment_0()); }
			(rule__Document__ElementsAssignment_0)
			{ after(grammarAccess.getDocumentAccess().getElementsAssignment_0()); }
		)
		(
			{ before(grammarAccess.getDocumentAccess().getElementsAssignment_0()); }
			(rule__Document__ElementsAssignment_0)*
			{ after(grammarAccess.getDocumentAccess().getElementsAssignment_0()); }
		)
	)
	|
	(
		{ before(grammarAccess.getDocumentAccess().getGroup_1()); }
		(rule__Document__Group_1__0)
		{ after(grammarAccess.getDocumentAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__ElementsAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDocumentAccess().getElementsTokenParserRuleCall_0_0_0()); }
		ruleToken
		{ after(grammarAccess.getDocumentAccess().getElementsTokenParserRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDocumentAccess().getElementsCommandParserRuleCall_0_0_1()); }
		ruleCommand
		{ after(grammarAccess.getDocumentAccess().getElementsCommandParserRuleCall_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ID_Token__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getID_TokenAccess().getIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getID_TokenAccess().getIDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getID_TokenAccess().getALPHA_NUMERICTerminalRuleCall_1()); }
		RULE_ALPHA_NUMERIC
		{ after(grammarAccess.getID_TokenAccess().getALPHA_NUMERICTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ID_WS__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getID_WSAccess().getIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getID_WSAccess().getIDTerminalRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getID_WSAccess().getALPHA_NUMERICTerminalRuleCall_1_1()); }
		RULE_ALPHA_NUMERIC
		{ after(grammarAccess.getID_WSAccess().getALPHA_NUMERICTerminalRuleCall_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getID_WSAccess().getBOTerminalRuleCall_1_2()); }
		RULE_BO
		{ after(grammarAccess.getID_WSAccess().getBOTerminalRuleCall_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getID_WSAccess().getBCTerminalRuleCall_1_3()); }
		RULE_BC
		{ after(grammarAccess.getID_WSAccess().getBCTerminalRuleCall_1_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ID_WS__Alternatives_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getID_WSAccess().getIDTerminalRuleCall_2_1_0()); }
		RULE_ID
		{ after(grammarAccess.getID_WSAccess().getIDTerminalRuleCall_2_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getID_WSAccess().getALPHA_NUMERICTerminalRuleCall_2_1_1()); }
		RULE_ALPHA_NUMERIC
		{ after(grammarAccess.getID_WSAccess().getALPHA_NUMERICTerminalRuleCall_2_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getID_WSAccess().getBOTerminalRuleCall_2_1_2()); }
		RULE_BO
		{ after(grammarAccess.getID_WSAccess().getBOTerminalRuleCall_2_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getID_WSAccess().getBCTerminalRuleCall_2_1_3()); }
		RULE_BC
		{ after(grammarAccess.getID_WSAccess().getBCTerminalRuleCall_2_1_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributesAccess().getValueAssignment_1_1_0()); }
		(rule__Attributes__ValueAssignment_1_1_0)
		{ after(grammarAccess.getAttributesAccess().getValueAssignment_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getAttributesAccess().getGroup_1_1_1()); }
		(rule__Attributes__Group_1_1_1__0)
		{ after(grammarAccess.getAttributesAccess().getGroup_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Document__Group_1__0__Impl
	rule__Document__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocumentAccess().getDocumentAction_1_0()); }
	()
	{ after(grammarAccess.getDocumentAccess().getDocumentAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Document__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocumentAccess().getENDTerminalRuleCall_1_1()); }
	RULE_END
	{ after(grammarAccess.getDocumentAccess().getENDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ID_WS__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ID_WS__Group__0__Impl
	rule__ID_WS__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ID_WS__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getID_WSAccess().getBSTerminalRuleCall_0()); }
	(RULE_BS)?
	{ after(grammarAccess.getID_WSAccess().getBSTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ID_WS__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ID_WS__Group__1__Impl
	rule__ID_WS__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ID_WS__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getID_WSAccess().getAlternatives_1()); }
	(rule__ID_WS__Alternatives_1)
	{ after(grammarAccess.getID_WSAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ID_WS__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ID_WS__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ID_WS__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getID_WSAccess().getGroup_2()); }
	(rule__ID_WS__Group_2__0)*
	{ after(grammarAccess.getID_WSAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ID_WS__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ID_WS__Group_2__0__Impl
	rule__ID_WS__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ID_WS__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getID_WSAccess().getSPACETerminalRuleCall_2_0()); }
	RULE_SPACE
	{ after(grammarAccess.getID_WSAccess().getSPACETerminalRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ID_WS__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ID_WS__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ID_WS__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getID_WSAccess().getAlternatives_2_1()); }
	(rule__ID_WS__Alternatives_2_1)
	{ after(grammarAccess.getID_WSAccess().getAlternatives_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubCommName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubCommName__Group__0__Impl
	rule__SubCommName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCommName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubCommNameAccess().getIdAssignment_0()); }
	(rule__SubCommName__IdAssignment_0)
	{ after(grammarAccess.getSubCommNameAccess().getIdAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCommName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubCommName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCommName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubCommNameAccess().getSubCommandAssignment_1()); }
	(rule__SubCommName__SubCommandAssignment_1)?
	{ after(grammarAccess.getSubCommNameAccess().getSubCommandAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CommandName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandName__Group__0__Impl
	rule__CommandName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandNameAccess().getLeadingAssignment_0()); }
	(rule__CommandName__LeadingAssignment_0)
	{ after(grammarAccess.getCommandNameAccess().getLeadingAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandNameAccess().getCNameAssignment_1()); }
	(rule__CommandName__CNameAssignment_1)
	{ after(grammarAccess.getCommandNameAccess().getCNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubCommand__Group__0__Impl
	rule__SubCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubCommandAccess().getCUBOTerminalRuleCall_0()); }
	RULE_CUBO
	{ after(grammarAccess.getSubCommandAccess().getCUBOTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubCommand__Group__1__Impl
	rule__SubCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubCommandAccess().getTypesAssignment_1()); }
	(rule__SubCommand__TypesAssignment_1)
	{ after(grammarAccess.getSubCommandAccess().getTypesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCommand__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubCommand__Group__2__Impl
	rule__SubCommand__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCommand__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubCommandAccess().getGroup_2()); }
	(rule__SubCommand__Group_2__0)*
	{ after(grammarAccess.getSubCommandAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCommand__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubCommand__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCommand__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubCommandAccess().getCUBCTerminalRuleCall_3()); }
	RULE_CUBC
	{ after(grammarAccess.getSubCommandAccess().getCUBCTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubCommand__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubCommand__Group_2__0__Impl
	rule__SubCommand__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCommand__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubCommandAccess().getPIPETerminalRuleCall_2_0()); }
	RULE_PIPE
	{ after(grammarAccess.getSubCommandAccess().getPIPETerminalRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCommand__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubCommand__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCommand__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubCommandAccess().getTypesAssignment_2_1()); }
	(rule__SubCommand__TypesAssignment_2_1)
	{ after(grammarAccess.getSubCommandAccess().getTypesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CommandParameters__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandParameters__Group__0__Impl
	rule__CommandParameters__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandParameters__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandParametersAccess().getSQBOTerminalRuleCall_0()); }
	RULE_SQBO
	{ after(grammarAccess.getCommandParametersAccess().getSQBOTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandParameters__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandParameters__Group__1__Impl
	rule__CommandParameters__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandParameters__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandParametersAccess().getAttributesAssignment_1()); }
	(rule__CommandParameters__AttributesAssignment_1)
	{ after(grammarAccess.getCommandParametersAccess().getAttributesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandParameters__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandParameters__Group__2__Impl
	rule__CommandParameters__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandParameters__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandParametersAccess().getGroup_2()); }
	(rule__CommandParameters__Group_2__0)*
	{ after(grammarAccess.getCommandParametersAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandParameters__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandParameters__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandParameters__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandParametersAccess().getSQBCTerminalRuleCall_3()); }
	RULE_SQBC
	{ after(grammarAccess.getCommandParametersAccess().getSQBCTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CommandParameters__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandParameters__Group_2__0__Impl
	rule__CommandParameters__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandParameters__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandParametersAccess().getKOMMATerminalRuleCall_2_0()); }
	RULE_KOMMA
	{ after(grammarAccess.getCommandParametersAccess().getKOMMATerminalRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandParameters__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommandParameters__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandParameters__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandParametersAccess().getAttributesAssignment_2_1()); }
	(rule__CommandParameters__AttributesAssignment_2_1)
	{ after(grammarAccess.getCommandParametersAccess().getAttributesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__0__Impl
	rule__Command__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getCommandAssignment_0()); }
	(rule__Command__CommandAssignment_0)
	{ after(grammarAccess.getCommandAccess().getCommandAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__1__Impl
	rule__Command__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getParametersAssignment_1()); }
	(rule__Command__ParametersAssignment_1)?
	{ after(grammarAccess.getCommandAccess().getParametersAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getSubCommandAssignment_2()); }
	(rule__Command__SubCommandAssignment_2)?
	{ after(grammarAccess.getCommandAccess().getSubCommandAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attributes__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attributes__Group__0__Impl
	rule__Attributes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributesAccess().getKeyAssignment_0()); }
	(rule__Attributes__KeyAssignment_0)
	{ after(grammarAccess.getAttributesAccess().getKeyAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attributes__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributesAccess().getGroup_1()); }
	(rule__Attributes__Group_1__0)?
	{ after(grammarAccess.getAttributesAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attributes__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attributes__Group_1__0__Impl
	rule__Attributes__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributesAccess().getEQTerminalRuleCall_1_0()); }
	RULE_EQ
	{ after(grammarAccess.getAttributesAccess().getEQTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attributes__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributesAccess().getAlternatives_1_1()); }
	(rule__Attributes__Alternatives_1_1)
	{ after(grammarAccess.getAttributesAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attributes__Group_1_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attributes__Group_1_1_1__0__Impl
	rule__Attributes__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributesAccess().getCUBOTerminalRuleCall_1_1_1_0()); }
	RULE_CUBO
	{ after(grammarAccess.getAttributesAccess().getCUBOTerminalRuleCall_1_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attributes__Group_1_1_1__1__Impl
	rule__Attributes__Group_1_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAttributesAccess().getMultiValueAssignment_1_1_1_1()); }
		(rule__Attributes__MultiValueAssignment_1_1_1_1)
		{ after(grammarAccess.getAttributesAccess().getMultiValueAssignment_1_1_1_1()); }
	)
	(
		{ before(grammarAccess.getAttributesAccess().getMultiValueAssignment_1_1_1_1()); }
		(rule__Attributes__MultiValueAssignment_1_1_1_1)*
		{ after(grammarAccess.getAttributesAccess().getMultiValueAssignment_1_1_1_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attributes__Group_1_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__Group_1_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributesAccess().getCUBCTerminalRuleCall_1_1_1_2()); }
	RULE_CUBC
	{ after(grammarAccess.getAttributesAccess().getCUBCTerminalRuleCall_1_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__DocumentAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getDocumentDocumentParserRuleCall_0()); }
		ruleDocument
		{ after(grammarAccess.getModelAccess().getDocumentDocumentParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Document__ElementsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDocumentAccess().getElementsAlternatives_0_0()); }
		(rule__Document__ElementsAlternatives_0_0)
		{ after(grammarAccess.getDocumentAccess().getElementsAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Token__TokenAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTokenAccess().getTokenALPHA_NUMERICTerminalRuleCall_0()); }
		RULE_ALPHA_NUMERIC
		{ after(grammarAccess.getTokenAccess().getTokenALPHA_NUMERICTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCommName__IdAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubCommNameAccess().getIdID_WSParserRuleCall_0_0()); }
		ruleID_WS
		{ after(grammarAccess.getSubCommNameAccess().getIdID_WSParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCommName__SubCommandAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubCommNameAccess().getSubCommandSubCommandParserRuleCall_1_0()); }
		ruleSubCommand
		{ after(grammarAccess.getSubCommNameAccess().getSubCommandSubCommandParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandName__LeadingAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandNameAccess().getLeadingBSTerminalRuleCall_0_0()); }
		RULE_BS
		{ after(grammarAccess.getCommandNameAccess().getLeadingBSTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandName__CNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandNameAccess().getCNameALPHA_NUMERICTerminalRuleCall_1_0()); }
		RULE_ALPHA_NUMERIC
		{ after(grammarAccess.getCommandNameAccess().getCNameALPHA_NUMERICTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCommand__TypesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubCommandAccess().getTypesSubCommNameParserRuleCall_1_0()); }
		ruleSubCommName
		{ after(grammarAccess.getSubCommandAccess().getTypesSubCommNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubCommand__TypesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubCommandAccess().getTypesSubCommNameParserRuleCall_2_1_0()); }
		ruleSubCommName
		{ after(grammarAccess.getSubCommandAccess().getTypesSubCommNameParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandParameters__AttributesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandParametersAccess().getAttributesAttributesParserRuleCall_1_0()); }
		ruleAttributes
		{ after(grammarAccess.getCommandParametersAccess().getAttributesAttributesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommandParameters__AttributesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandParametersAccess().getAttributesAttributesParserRuleCall_2_1_0()); }
		ruleAttributes
		{ after(grammarAccess.getCommandParametersAccess().getAttributesAttributesParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__CommandAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getCommandCommandNameParserRuleCall_0_0()); }
		ruleCommandName
		{ after(grammarAccess.getCommandAccess().getCommandCommandNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__ParametersAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getParametersCommandParametersParserRuleCall_1_0()); }
		ruleCommandParameters
		{ after(grammarAccess.getCommandAccess().getParametersCommandParametersParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__SubCommandAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getSubCommandSubCommandParserRuleCall_2_0()); }
		ruleSubCommand
		{ after(grammarAccess.getCommandAccess().getSubCommandSubCommandParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__KeyAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributesAccess().getKeyID_TokenParserRuleCall_0_0()); }
		ruleID_Token
		{ after(grammarAccess.getAttributesAccess().getKeyID_TokenParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__ValueAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributesAccess().getValueID_TokenParserRuleCall_1_1_0_0()); }
		ruleID_Token
		{ after(grammarAccess.getAttributesAccess().getValueID_TokenParserRuleCall_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attributes__MultiValueAssignment_1_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributesAccess().getMultiValueID_TokenParserRuleCall_1_1_1_1_0()); }
		ruleID_Token
		{ after(grammarAccess.getAttributesAccess().getMultiValueID_TokenParserRuleCall_1_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '%' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_BS : '\\';

RULE_SYMBOLS : RULE_SYMBOL+;

RULE_ALPHA_NUMERIC : RULE_ALPHA+ (RULE_NUMERIC+ RULE_ALPHA+)* RULE_NUMERIC*;

RULE_ID : (RULE_ALPHA|RULE_SYMBOL) (RULE_ALPHA|RULE_SYMBOL|RULE_NUMERIC|RULE_DOT|RULE_AND)*;

fragment RULE_ALPHA : (RULE_ALPHAC|RULE_ALPHAS);

fragment RULE_ALPHAC : ('A'..'Z'|'\u00C4'..'\u00DC'|'\u00C0'..'\u00D9'|'\u00C1'..'\u00DA');

fragment RULE_ALPHAS : ('a'..'z'|'\u00E4'..'\u00FC'|'\u00DF'|'\u00E0'..'\u00F9'|'\u00E1'..'\u00FA');

fragment RULE_NUMERIC : '0'..'9';

RULE_SQBO : '[';

RULE_SQBC : ']';

RULE_BO : '(';

RULE_BC : ')';

RULE_CUBO : '{';

RULE_CUBC : '}';

RULE_KOMMA : ',';

RULE_EQ : '=';

fragment RULE_DOT : '.';

fragment RULE_AND : '&';

RULE_PIPE : '|';

RULE_SPACE : ' ';

fragment RULE_SYMBOL : ('-'|'_'|'+'|'#'|'~');

RULE_END : EOF;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
