/*
 * generated by Xtext 2.33.0
 */
grammar InternalTexDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package org.xixum.latex.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xixum.latex.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xixum.latex.services.TexDslGrammarAccess;

}
@parser::members {
	private TexDslGrammarAccess grammarAccess;

	public void setGrammarAccess(TexDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getElementsAssignment()); }
		(rule__Model__ElementsAssignment)*
		{ after(grammarAccess.getModelAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElement
entryRuleElement
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementAccess().getAlternatives()); }
		(rule__Element__Alternatives)
		{ after(grammarAccess.getElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getGroup()); }
		(rule__Command__Group__0)
		{ after(grammarAccess.getCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOptionalArgument
entryRuleOptionalArgument
:
{ before(grammarAccess.getOptionalArgumentRule()); }
	 ruleOptionalArgument
{ after(grammarAccess.getOptionalArgumentRule()); } 
	 EOF 
;

// Rule OptionalArgument
ruleOptionalArgument 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOptionalArgumentAccess().getGroup()); }
		(rule__OptionalArgument__Group__0)
		{ after(grammarAccess.getOptionalArgumentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMandatoryArgument
entryRuleMandatoryArgument
:
{ before(grammarAccess.getMandatoryArgumentRule()); }
	 ruleMandatoryArgument
{ after(grammarAccess.getMandatoryArgumentRule()); } 
	 EOF 
;

// Rule MandatoryArgument
ruleMandatoryArgument 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMandatoryArgumentAccess().getGroup()); }
		(rule__MandatoryArgument__Group__0)
		{ after(grammarAccess.getMandatoryArgumentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArgumentContent
entryRuleArgumentContent
:
{ before(grammarAccess.getArgumentContentRule()); }
	 ruleArgumentContent
{ after(grammarAccess.getArgumentContentRule()); } 
	 EOF 
;

// Rule ArgumentContent
ruleArgumentContent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArgumentContentAccess().getAlternatives()); }
		(rule__ArgumentContent__Alternatives)
		{ after(grammarAccess.getArgumentContentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTextContainer
entryRuleTextContainer
:
{ before(grammarAccess.getTextContainerRule()); }
	 ruleTextContainer
{ after(grammarAccess.getTextContainerRule()); } 
	 EOF 
;

// Rule TextContainer
ruleTextContainer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getTextContainerAccess().getTextAssignment()); }
			(rule__TextContainer__TextAssignment)
			{ after(grammarAccess.getTextContainerAccess().getTextAssignment()); }
		)
		(
			{ before(grammarAccess.getTextContainerAccess().getTextAssignment()); }
			(rule__TextContainer__TextAssignment)*
			{ after(grammarAccess.getTextContainerAccess().getTextAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTextContent
entryRuleTextContent
:
{ before(grammarAccess.getTextContentRule()); }
	 ruleTextContent
{ after(grammarAccess.getTextContentRule()); } 
	 EOF 
;

// Rule TextContent
ruleTextContent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTextContentAccess().getAlternatives()); }
		(rule__TextContent__Alternatives)
		{ after(grammarAccess.getTextContentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIdentifiers
entryRuleIdentifiers
:
{ before(grammarAccess.getIdentifiersRule()); }
	 ruleIdentifiers
{ after(grammarAccess.getIdentifiersRule()); } 
	 EOF 
;

// Rule Identifiers
ruleIdentifiers 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdentifiersAccess().getIdAssignment()); }
		(rule__Identifiers__IdAssignment)
		{ after(grammarAccess.getIdentifiersAccess().getIdAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumbers
entryRuleNumbers
:
{ before(grammarAccess.getNumbersRule()); }
	 ruleNumbers
{ after(grammarAccess.getNumbersRule()); } 
	 EOF 
;

// Rule Numbers
ruleNumbers 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumbersAccess().getNumAssignment()); }
		(rule__Numbers__NumAssignment)
		{ after(grammarAccess.getNumbersAccess().getNumAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperators
entryRuleOperators
:
{ before(grammarAccess.getOperatorsRule()); }
	 ruleOperators
{ after(grammarAccess.getOperatorsRule()); } 
	 EOF 
;

// Rule Operators
ruleOperators 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getOperatorsAccess().getOpAssignment()); }
			(rule__Operators__OpAssignment)
			{ after(grammarAccess.getOperatorsAccess().getOpAssignment()); }
		)
		(
			{ before(grammarAccess.getOperatorsAccess().getOpAssignment()); }
			(rule__Operators__OpAssignment)*
			{ after(grammarAccess.getOperatorsAccess().getOpAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMathExpression
entryRuleMathExpression
:
{ before(grammarAccess.getMathExpressionRule()); }
	 ruleMathExpression
{ after(grammarAccess.getMathExpressionRule()); } 
	 EOF 
;

// Rule MathExpression
ruleMathExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMathExpressionAccess().getAlternatives()); }
		(rule__MathExpression__Alternatives)
		{ after(grammarAccess.getMathExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInlineMath
entryRuleInlineMath
:
{ before(grammarAccess.getInlineMathRule()); }
	 ruleInlineMath
{ after(grammarAccess.getInlineMathRule()); } 
	 EOF 
;

// Rule InlineMath
ruleInlineMath 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInlineMathAccess().getGroup()); }
		(rule__InlineMath__Group__0)
		{ after(grammarAccess.getInlineMathAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDisplayMath
entryRuleDisplayMath
:
{ before(grammarAccess.getDisplayMathRule()); }
	 ruleDisplayMath
{ after(grammarAccess.getDisplayMathRule()); } 
	 EOF 
;

// Rule DisplayMath
ruleDisplayMath 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDisplayMathAccess().getGroup()); }
		(rule__DisplayMath__Group__0)
		{ after(grammarAccess.getDisplayMathAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMathContent
entryRuleMathContent
:
{ before(grammarAccess.getMathContentRule()); }
	 ruleMathContent
{ after(grammarAccess.getMathContentRule()); } 
	 EOF 
;

// Rule MathContent
ruleMathContent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMathContentAccess().getAlternatives()); }
		(rule__MathContent__Alternatives)
		{ after(grammarAccess.getMathContentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getCommandParserRuleCall_0()); }
		ruleCommand
		{ after(grammarAccess.getElementAccess().getCommandParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getTextContentParserRuleCall_1()); }
		ruleTextContent
		{ after(grammarAccess.getElementAccess().getTextContentParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getMathExpressionParserRuleCall_2()); }
		ruleMathExpression
		{ after(grammarAccess.getElementAccess().getMathExpressionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentContent__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArgumentContentAccess().getTextContentParserRuleCall_0()); }
		ruleTextContent
		{ after(grammarAccess.getArgumentContentAccess().getTextContentParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getArgumentContentAccess().getCommandParserRuleCall_1()); }
		ruleCommand
		{ after(grammarAccess.getArgumentContentAccess().getCommandParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getArgumentContentAccess().getMathExpressionParserRuleCall_2()); }
		ruleMathExpression
		{ after(grammarAccess.getArgumentContentAccess().getMathExpressionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TextContent__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTextContentAccess().getIdentifiersParserRuleCall_0()); }
		ruleIdentifiers
		{ after(grammarAccess.getTextContentAccess().getIdentifiersParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTextContentAccess().getTextContainerParserRuleCall_1()); }
		ruleTextContainer
		{ after(grammarAccess.getTextContentAccess().getTextContainerParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTextContentAccess().getOperatorsParserRuleCall_2()); }
		ruleOperators
		{ after(grammarAccess.getTextContentAccess().getOperatorsParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getTextContentAccess().getNumbersParserRuleCall_3()); }
		ruleNumbers
		{ after(grammarAccess.getTextContentAccess().getNumbersParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getTextContentAccess().getOptionalArgumentParserRuleCall_4()); }
		ruleOptionalArgument
		{ after(grammarAccess.getTextContentAccess().getOptionalArgumentParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getTextContentAccess().getMandatoryArgumentParserRuleCall_5()); }
		ruleMandatoryArgument
		{ after(grammarAccess.getTextContentAccess().getMandatoryArgumentParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathExpressionAccess().getInlineMathParserRuleCall_0()); }
		ruleInlineMath
		{ after(grammarAccess.getMathExpressionAccess().getInlineMathParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMathExpressionAccess().getDisplayMathParserRuleCall_1()); }
		ruleDisplayMath
		{ after(grammarAccess.getMathExpressionAccess().getDisplayMathParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathContent__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathContentAccess().getCommandParserRuleCall_0()); }
		ruleCommand
		{ after(grammarAccess.getMathContentAccess().getCommandParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMathContentAccess().getTextContentParserRuleCall_1()); }
		ruleTextContent
		{ after(grammarAccess.getMathContentAccess().getTextContentParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getMathContentAccess().getNumbersParserRuleCall_2()); }
		ruleNumbers
		{ after(grammarAccess.getMathContentAccess().getNumbersParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getMathContentAccess().getOperatorsParserRuleCall_3()); }
		ruleOperators
		{ after(grammarAccess.getMathContentAccess().getOperatorsParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__0__Impl
	rule__Command__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getBackslashKeyword_0()); }
	'\\'
	{ after(grammarAccess.getCommandAccess().getBackslashKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__1__Impl
	rule__Command__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getCommandAssignment_1()); }
	(rule__Command__CommandAssignment_1)
	{ after(grammarAccess.getCommandAccess().getCommandAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__2__Impl
	rule__Command__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getOptionalArgsAssignment_2()); }
	(rule__Command__OptionalArgsAssignment_2)*
	{ after(grammarAccess.getCommandAccess().getOptionalArgsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getMandatoryArgsAssignment_3()); }
	(rule__Command__MandatoryArgsAssignment_3)*
	{ after(grammarAccess.getCommandAccess().getMandatoryArgsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OptionalArgument__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptionalArgument__Group__0__Impl
	rule__OptionalArgument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalArgument__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptionalArgumentAccess().getOptionalArgumentAction_0()); }
	()
	{ after(grammarAccess.getOptionalArgumentAccess().getOptionalArgumentAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalArgument__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptionalArgument__Group__1__Impl
	rule__OptionalArgument__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalArgument__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptionalArgumentAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getOptionalArgumentAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalArgument__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptionalArgument__Group__2__Impl
	rule__OptionalArgument__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalArgument__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptionalArgumentAccess().getContentAssignment_2()); }
	(rule__OptionalArgument__ContentAssignment_2)*
	{ after(grammarAccess.getOptionalArgumentAccess().getContentAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalArgument__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptionalArgument__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalArgument__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptionalArgumentAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getOptionalArgumentAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MandatoryArgument__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MandatoryArgument__Group__0__Impl
	rule__MandatoryArgument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MandatoryArgument__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMandatoryArgumentAccess().getMandatoryArgumentAction_0()); }
	()
	{ after(grammarAccess.getMandatoryArgumentAccess().getMandatoryArgumentAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MandatoryArgument__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MandatoryArgument__Group__1__Impl
	rule__MandatoryArgument__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MandatoryArgument__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMandatoryArgumentAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getMandatoryArgumentAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MandatoryArgument__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MandatoryArgument__Group__2__Impl
	rule__MandatoryArgument__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MandatoryArgument__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMandatoryArgumentAccess().getContentAssignment_2()); }
	(rule__MandatoryArgument__ContentAssignment_2)*
	{ after(grammarAccess.getMandatoryArgumentAccess().getContentAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MandatoryArgument__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MandatoryArgument__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MandatoryArgument__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMandatoryArgumentAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getMandatoryArgumentAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InlineMath__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InlineMath__Group__0__Impl
	rule__InlineMath__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InlineMath__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInlineMathAccess().getInlineMathAction_0()); }
	()
	{ after(grammarAccess.getInlineMathAccess().getInlineMathAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InlineMath__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InlineMath__Group__1__Impl
	rule__InlineMath__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InlineMath__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInlineMathAccess().getDollarSignKeyword_1()); }
	'$'
	{ after(grammarAccess.getInlineMathAccess().getDollarSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InlineMath__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InlineMath__Group__2__Impl
	rule__InlineMath__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InlineMath__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInlineMathAccess().getContentAssignment_2()); }
	(rule__InlineMath__ContentAssignment_2)*
	{ after(grammarAccess.getInlineMathAccess().getContentAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InlineMath__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InlineMath__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InlineMath__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInlineMathAccess().getDollarSignKeyword_3()); }
	'$'
	{ after(grammarAccess.getInlineMathAccess().getDollarSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DisplayMath__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisplayMath__Group__0__Impl
	rule__DisplayMath__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DisplayMath__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisplayMathAccess().getDisplayMathAction_0()); }
	()
	{ after(grammarAccess.getDisplayMathAccess().getDisplayMathAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisplayMath__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisplayMath__Group__1__Impl
	rule__DisplayMath__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DisplayMath__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisplayMathAccess().getDollarSignDollarSignKeyword_1()); }
	'$$'
	{ after(grammarAccess.getDisplayMathAccess().getDollarSignDollarSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisplayMath__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisplayMath__Group__2__Impl
	rule__DisplayMath__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DisplayMath__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisplayMathAccess().getContentAssignment_2()); }
	(rule__DisplayMath__ContentAssignment_2)*
	{ after(grammarAccess.getDisplayMathAccess().getContentAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisplayMath__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisplayMath__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DisplayMath__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisplayMathAccess().getDollarSignDollarSignKeyword_3()); }
	'$$'
	{ after(grammarAccess.getDisplayMathAccess().getDollarSignDollarSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getElementsElementParserRuleCall_0()); }
		ruleElement
		{ after(grammarAccess.getModelAccess().getElementsElementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__CommandAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getCommandIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getCommandAccess().getCommandIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__OptionalArgsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getOptionalArgsOptionalArgumentParserRuleCall_2_0()); }
		ruleOptionalArgument
		{ after(grammarAccess.getCommandAccess().getOptionalArgsOptionalArgumentParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__MandatoryArgsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getMandatoryArgsMandatoryArgumentParserRuleCall_3_0()); }
		ruleMandatoryArgument
		{ after(grammarAccess.getCommandAccess().getMandatoryArgsMandatoryArgumentParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalArgument__ContentAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptionalArgumentAccess().getContentArgumentContentParserRuleCall_2_0()); }
		ruleArgumentContent
		{ after(grammarAccess.getOptionalArgumentAccess().getContentArgumentContentParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MandatoryArgument__ContentAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMandatoryArgumentAccess().getContentArgumentContentParserRuleCall_2_0()); }
		ruleArgumentContent
		{ after(grammarAccess.getMandatoryArgumentAccess().getContentArgumentContentParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TextContainer__TextAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTextContainerAccess().getTextTEXTTerminalRuleCall_0()); }
		RULE_TEXT
		{ after(grammarAccess.getTextContainerAccess().getTextTEXTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifiers__IdAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifiersAccess().getIdIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getIdentifiersAccess().getIdIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__NumAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumbersAccess().getNumNUMBERTerminalRuleCall_0()); }
		RULE_NUMBER
		{ after(grammarAccess.getNumbersAccess().getNumNUMBERTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operators__OpAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorsAccess().getOpSYMBOLTerminalRuleCall_0()); }
		RULE_SYMBOL
		{ after(grammarAccess.getOperatorsAccess().getOpSYMBOLTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InlineMath__ContentAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInlineMathAccess().getContentMathContentParserRuleCall_2_0()); }
		ruleMathContent
		{ after(grammarAccess.getInlineMathAccess().getContentMathContentParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisplayMath__ContentAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDisplayMathAccess().getContentMathContentParserRuleCall_2_0()); }
		ruleMathContent
		{ after(grammarAccess.getDisplayMathAccess().getContentMathContentParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_SYMBOL : ('+'|'-'|'='|'/'|'*'|'^'|'_'|'<'|'>'|'&'|'%'|'#');

RULE_SL_COMMENT : '%' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_NUMBER : RULE_INT ('.' RULE_INT)?;

fragment RULE_INT : ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_TEXT : ~(('\\'|'$'|'{'|'}'|'['|']'|'^'|'_'|' '|'\t'|'\r'|'\n'))+;
