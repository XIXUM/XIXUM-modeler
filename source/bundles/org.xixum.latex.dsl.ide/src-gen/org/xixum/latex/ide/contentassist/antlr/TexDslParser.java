/*
 * generated by Xtext 2.33.0
 */
package org.xixum.latex.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xixum.latex.ide.contentassist.antlr.internal.InternalTexDslParser;
import org.xixum.latex.services.TexDslGrammarAccess;

public class TexDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TexDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TexDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDocumentAccess().getAlternatives(), "rule__Document__Alternatives");
			builder.put(grammarAccess.getAnyTextAccess().getAlternatives(), "rule__AnyText__Alternatives");
			builder.put(grammarAccess.getCommandAccess().getAlternatives_2_2_0(), "rule__Command__Alternatives_2_2_0");
			builder.put(grammarAccess.getCommandExtAccess().getCommandAlternatives_0_0(), "rule__CommandExt__CommandAlternatives_0_0");
			builder.put(grammarAccess.getCompoundAccess().getAlternatives(), "rule__Compound__Alternatives");
			builder.put(grammarAccess.getExtrasAccess().getTokensAlternatives_0(), "rule__Extras__TokensAlternatives_0");
			builder.put(grammarAccess.getAttributesAccess().getAlternatives_1_1(), "rule__Attributes__Alternatives_1_1");
			builder.put(grammarAccess.getDocumentAccess().getGroup_2(), "rule__Document__Group_2__0");
			builder.put(grammarAccess.getCommandAccess().getGroup(), "rule__Command__Group__0");
			builder.put(grammarAccess.getCommandAccess().getGroup_1(), "rule__Command__Group_1__0");
			builder.put(grammarAccess.getCommandAccess().getGroup_1_2(), "rule__Command__Group_1_2__0");
			builder.put(grammarAccess.getCommandAccess().getGroup_2(), "rule__Command__Group_2__0");
			builder.put(grammarAccess.getCommandAccess().getGroup_2_2(), "rule__Command__Group_2_2__0");
			builder.put(grammarAccess.getCommandExtAccess().getGroup(), "rule__CommandExt__Group__0");
			builder.put(grammarAccess.getCommandExtAccess().getGroup_1(), "rule__CommandExt__Group_1__0");
			builder.put(grammarAccess.getCommandExtAccess().getGroup_1_2(), "rule__CommandExt__Group_1_2__0");
			builder.put(grammarAccess.getAttributesAccess().getGroup(), "rule__Attributes__Group__0");
			builder.put(grammarAccess.getAttributesAccess().getGroup_1(), "rule__Attributes__Group_1__0");
			builder.put(grammarAccess.getAttributesAccess().getGroup_1_1_0(), "rule__Attributes__Group_1_1_0__0");
			builder.put(grammarAccess.getModelAccess().getDocumentAssignment(), "rule__Model__DocumentAssignment");
			builder.put(grammarAccess.getTextAccess().getTokenAssignment(), "rule__Text__TokenAssignment");
			builder.put(grammarAccess.getCommandAccess().getCommandAssignment_0(), "rule__Command__CommandAssignment_0");
			builder.put(grammarAccess.getCommandAccess().getAttrsAssignment_1_1(), "rule__Command__AttrsAssignment_1_1");
			builder.put(grammarAccess.getCommandAccess().getAttrsAssignment_1_2_1(), "rule__Command__AttrsAssignment_1_2_1");
			builder.put(grammarAccess.getCommandAccess().getTokensAssignment_2_1(), "rule__Command__TokensAssignment_2_1");
			builder.put(grammarAccess.getCommandAccess().getTokensAssignment_2_2_1(), "rule__Command__TokensAssignment_2_2_1");
			builder.put(grammarAccess.getMultiAccess().getTokensAssignment(), "rule__Multi__TokensAssignment");
			builder.put(grammarAccess.getCommandExtAccess().getCommandAssignment_0(), "rule__CommandExt__CommandAssignment_0");
			builder.put(grammarAccess.getCommandExtAccess().getTokensAssignment_1_1(), "rule__CommandExt__TokensAssignment_1_1");
			builder.put(grammarAccess.getCommandExtAccess().getTokensAssignment_1_2_1(), "rule__CommandExt__TokensAssignment_1_2_1");
			builder.put(grammarAccess.getExtrasAccess().getTokensAssignment(), "rule__Extras__TokensAssignment");
			builder.put(grammarAccess.getAttributesAccess().getKeyAssignment_0(), "rule__Attributes__KeyAssignment_0");
			builder.put(grammarAccess.getAttributesAccess().getMultiAssignment_1_1_0_1(), "rule__Attributes__MultiAssignment_1_1_0_1");
			builder.put(grammarAccess.getAttributesAccess().getSingleAssignment_1_1_1(), "rule__Attributes__SingleAssignment_1_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TexDslGrammarAccess grammarAccess;

	@Override
	protected InternalTexDslParser createParser() {
		InternalTexDslParser result = new InternalTexDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT" };
	}

	public TexDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TexDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
