/*
 * generated by Xtext 2.33.0
 */
package org.xixum.latex.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xixum.latex.ide.contentassist.antlr.internal.InternalTexDslParser;
import org.xixum.latex.services.TexDslGrammarAccess;

public class TexDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TexDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TexDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getArgumentContentAccess().getAlternatives(), "rule__ArgumentContent__Alternatives");
			builder.put(grammarAccess.getTextContentAccess().getAlternatives(), "rule__TextContent__Alternatives");
			builder.put(grammarAccess.getMathExpressionAccess().getAlternatives(), "rule__MathExpression__Alternatives");
			builder.put(grammarAccess.getMathContentAccess().getAlternatives(), "rule__MathContent__Alternatives");
			builder.put(grammarAccess.getCommandAccess().getGroup(), "rule__Command__Group__0");
			builder.put(grammarAccess.getOptionalArgumentAccess().getGroup(), "rule__OptionalArgument__Group__0");
			builder.put(grammarAccess.getMandatoryArgumentAccess().getGroup(), "rule__MandatoryArgument__Group__0");
			builder.put(grammarAccess.getInlineMathAccess().getGroup(), "rule__InlineMath__Group__0");
			builder.put(grammarAccess.getDisplayMathAccess().getGroup(), "rule__DisplayMath__Group__0");
			builder.put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
			builder.put(grammarAccess.getCommandAccess().getCommandAssignment_1(), "rule__Command__CommandAssignment_1");
			builder.put(grammarAccess.getCommandAccess().getOptionalArgsAssignment_2(), "rule__Command__OptionalArgsAssignment_2");
			builder.put(grammarAccess.getCommandAccess().getMandatoryArgsAssignment_3(), "rule__Command__MandatoryArgsAssignment_3");
			builder.put(grammarAccess.getOptionalArgumentAccess().getContentAssignment_2(), "rule__OptionalArgument__ContentAssignment_2");
			builder.put(grammarAccess.getMandatoryArgumentAccess().getContentAssignment_2(), "rule__MandatoryArgument__ContentAssignment_2");
			builder.put(grammarAccess.getTextContainerAccess().getTextAssignment(), "rule__TextContainer__TextAssignment");
			builder.put(grammarAccess.getIdentifiersAccess().getIdAssignment(), "rule__Identifiers__IdAssignment");
			builder.put(grammarAccess.getNumbersAccess().getNumAssignment(), "rule__Numbers__NumAssignment");
			builder.put(grammarAccess.getOperatorsAccess().getOpAssignment(), "rule__Operators__OpAssignment");
			builder.put(grammarAccess.getInlineMathAccess().getContentAssignment_2(), "rule__InlineMath__ContentAssignment_2");
			builder.put(grammarAccess.getDisplayMathAccess().getContentAssignment_2(), "rule__DisplayMath__ContentAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TexDslGrammarAccess grammarAccess;

	@Override
	protected InternalTexDslParser createParser() {
		InternalTexDslParser result = new InternalTexDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT" };
	}

	public TexDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TexDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
