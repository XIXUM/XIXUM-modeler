/*
 * generated by Xtext 2.33.0
 */
package org.xixum.latex.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xixum.latex.ide.contentassist.antlr.internal.InternalTexDslParser;
import org.xixum.latex.services.TexDslGrammarAccess;

public class TexDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TexDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TexDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDocumentAccess().getAlternatives(), "rule__Document__Alternatives");
			builder.put(grammarAccess.getDocumentAccess().getElementsAlternatives_0_0(), "rule__Document__ElementsAlternatives_0_0");
			builder.put(grammarAccess.getID_TokenAccess().getAlternatives(), "rule__ID_Token__Alternatives");
			builder.put(grammarAccess.getID_WSAccess().getAlternatives_1(), "rule__ID_WS__Alternatives_1");
			builder.put(grammarAccess.getID_WSAccess().getAlternatives_2_1(), "rule__ID_WS__Alternatives_2_1");
			builder.put(grammarAccess.getAttributesAccess().getAlternatives_1_1(), "rule__Attributes__Alternatives_1_1");
			builder.put(grammarAccess.getDocumentAccess().getGroup_1(), "rule__Document__Group_1__0");
			builder.put(grammarAccess.getID_WSAccess().getGroup(), "rule__ID_WS__Group__0");
			builder.put(grammarAccess.getID_WSAccess().getGroup_2(), "rule__ID_WS__Group_2__0");
			builder.put(grammarAccess.getSubCommNameAccess().getGroup(), "rule__SubCommName__Group__0");
			builder.put(grammarAccess.getCommandNameAccess().getGroup(), "rule__CommandName__Group__0");
			builder.put(grammarAccess.getSubCommandAccess().getGroup(), "rule__SubCommand__Group__0");
			builder.put(grammarAccess.getSubCommandAccess().getGroup_2(), "rule__SubCommand__Group_2__0");
			builder.put(grammarAccess.getCommandParametersAccess().getGroup(), "rule__CommandParameters__Group__0");
			builder.put(grammarAccess.getCommandParametersAccess().getGroup_2(), "rule__CommandParameters__Group_2__0");
			builder.put(grammarAccess.getCommandAccess().getGroup(), "rule__Command__Group__0");
			builder.put(grammarAccess.getAttributesAccess().getGroup(), "rule__Attributes__Group__0");
			builder.put(grammarAccess.getAttributesAccess().getGroup_1(), "rule__Attributes__Group_1__0");
			builder.put(grammarAccess.getAttributesAccess().getGroup_1_1_1(), "rule__Attributes__Group_1_1_1__0");
			builder.put(grammarAccess.getModelAccess().getDocumentAssignment(), "rule__Model__DocumentAssignment");
			builder.put(grammarAccess.getDocumentAccess().getElementsAssignment_0(), "rule__Document__ElementsAssignment_0");
			builder.put(grammarAccess.getTokenAccess().getTokenAssignment(), "rule__Token__TokenAssignment");
			builder.put(grammarAccess.getSubCommNameAccess().getIdAssignment_0(), "rule__SubCommName__IdAssignment_0");
			builder.put(grammarAccess.getSubCommNameAccess().getSubCommandAssignment_1(), "rule__SubCommName__SubCommandAssignment_1");
			builder.put(grammarAccess.getCommandNameAccess().getLeadingAssignment_0(), "rule__CommandName__LeadingAssignment_0");
			builder.put(grammarAccess.getCommandNameAccess().getCNameAssignment_1(), "rule__CommandName__CNameAssignment_1");
			builder.put(grammarAccess.getSubCommandAccess().getTypesAssignment_1(), "rule__SubCommand__TypesAssignment_1");
			builder.put(grammarAccess.getSubCommandAccess().getTypesAssignment_2_1(), "rule__SubCommand__TypesAssignment_2_1");
			builder.put(grammarAccess.getCommandParametersAccess().getAttributesAssignment_1(), "rule__CommandParameters__AttributesAssignment_1");
			builder.put(grammarAccess.getCommandParametersAccess().getAttributesAssignment_2_1(), "rule__CommandParameters__AttributesAssignment_2_1");
			builder.put(grammarAccess.getCommandAccess().getCommandAssignment_0(), "rule__Command__CommandAssignment_0");
			builder.put(grammarAccess.getCommandAccess().getParametersAssignment_1(), "rule__Command__ParametersAssignment_1");
			builder.put(grammarAccess.getCommandAccess().getSubCommandAssignment_2(), "rule__Command__SubCommandAssignment_2");
			builder.put(grammarAccess.getAttributesAccess().getKeyAssignment_0(), "rule__Attributes__KeyAssignment_0");
			builder.put(grammarAccess.getAttributesAccess().getValueAssignment_1_1_0(), "rule__Attributes__ValueAssignment_1_1_0");
			builder.put(grammarAccess.getAttributesAccess().getMultiValueAssignment_1_1_1_1(), "rule__Attributes__MultiValueAssignment_1_1_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TexDslGrammarAccess grammarAccess;

	@Override
	protected InternalTexDslParser createParser() {
		InternalTexDslParser result = new InternalTexDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TexDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TexDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
