/**
 * generated by Xtext 2.33.0
 */
package org.xixum.modeler.spelling.nLX.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;
import org.xixum.modeler.spelling.nLX.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class NLXFactoryImpl extends EFactoryImpl implements NLXFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static NLXFactory init()
  {
    try
    {
      NLXFactory theNLXFactory = (NLXFactory)EPackage.Registry.INSTANCE.getEFactory(NLXPackage.eNS_URI);
      if (theNLXFactory != null)
      {
        return theNLXFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new NLXFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NLXFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case NLXPackage.MODEL: return createModel();
      case NLXPackage.SENTENCE_TYPE: return createSentenceType();
      case NLXPackage.PARAGRAPH_BLOCK: return createParagraphBlock();
      case NLXPackage.BLOCK_ELEMENT: return createBlockElement();
      case NLXPackage.FOOT_NOTE: return createFootNote();
      case NLXPackage.TABLE_LINE: return createTableLine();
      case NLXPackage.TABLE_BORDER: return createTableBorder();
      case NLXPackage.TABLE_ROW: return createTableRow();
      case NLXPackage.TABLE_COLUMN_SEPARATOR: return createTableColumnSeparator();
      case NLXPackage.TABLE: return createTable();
      case NLXPackage.LINE_SENTENCE_CHAIN: return createLineSentenceChain();
      case NLXPackage.SENTENCE_CHAIN: return createSentenceChain();
      case NLXPackage.SENTENCE_CHAIN_X: return createSentenceChainX();
      case NLXPackage.SENTENCE: return createSentence();
      case NLXPackage.LINE_SENTENCE: return createLineSentence();
      case NLXPackage.FREE_SENTENCE: return createFreeSentence();
      case NLXPackage.SENTENCE_X: return createSentenceX();
      case NLXPackage.LIST_SENTENCE: return createListSentence();
      case NLXPackage.CHAPTER_SENTENCE: return createChapterSentence();
      case NLXPackage.SUB_SENTENCE: return createSubSentence();
      case NLXPackage.TRAIL_SUB_SENTENCE: return createTrailSubSentence();
      case NLXPackage.FREE_SUB_SENTENCE: return createFreeSubSentence();
      case NLXPackage.LINE_SUB_SENTENCE: return createLineSubSentence();
      case NLXPackage.NO_NELEMENT: return createNoNElement();
      case NLXPackage.BRACKETS: return createBrackets();
      case NLXPackage.NO_NELEMENT_X: return createNoNElementX();
      case NLXPackage.NO_NELEMENT_X2: return createNoNElementX2();
      case NLXPackage.ELEMENTS: return createElements();
      case NLXPackage.ALL_ELEMENTS: return createAllElements();
      case NLXPackage.BRACKET_SENTENCE: return createBracketSentence();
      case NLXPackage.WORD: return createWord();
      case NLXPackage.WORD_SHORT: return createWordShort();
      case NLXPackage.IT_WORD: return createItWord();
      case NLXPackage.QUOTE: return createQuote();
      case NLXPackage.UNIT: return createUnit();
      case NLXPackage.SIMPLE_UNIT: return createSimpleUnit();
      case NLXPackage.CHAPTER_UNIT_HI: return createChapter_Unit_HI();
      case NLXPackage.CHAPTER_UNIT_LOW: return createChapter_Unit_Low();
      case NLXPackage.HASH_NUMBER: return createHashNumber();
      case NLXPackage.CHAPTER_ALPHA: return createChapterAlpha();
      case NLXPackage.SYMBOLS_X: return createSymbolsX();
      case NLXPackage.SYMBOLS: return createSymbols();
      case NLXPackage.SHORTCUT_GEN: return createShortcutGen();
      case NLXPackage.SHORTCUT_LIB: return createShortcutLib();
      case NLXPackage.SHORT_CUT: return createShortCut();
      case NLXPackage.IGNORED_TEXT: return createIgnoredText();
      case NLXPackage.URL_ADRESS: return createUrlAdress();
      case NLXPackage.EMAIL_AT: return createEmailAT();
      case NLXPackage.MAIL_ADRESS: return createMailAdress();
      case NLXPackage.FORMULA: return createFormula();
      case NLXPackage.ARRAY: return createArray();
      case NLXPackage.NEW_LINE: return createNew_Line();
      case NLXPackage.EXT_BRACKET_SENTENCE: return createExtBracketSentence();
      case NLXPackage.ESTRING: return createEString();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SentenceType createSentenceType()
  {
    SentenceTypeImpl sentenceType = new SentenceTypeImpl();
    return sentenceType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParagraphBlock createParagraphBlock()
  {
    ParagraphBlockImpl paragraphBlock = new ParagraphBlockImpl();
    return paragraphBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BlockElement createBlockElement()
  {
    BlockElementImpl blockElement = new BlockElementImpl();
    return blockElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FootNote createFootNote()
  {
    FootNoteImpl footNote = new FootNoteImpl();
    return footNote;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TableLine createTableLine()
  {
    TableLineImpl tableLine = new TableLineImpl();
    return tableLine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TableBorder createTableBorder()
  {
    TableBorderImpl tableBorder = new TableBorderImpl();
    return tableBorder;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TableRow createTableRow()
  {
    TableRowImpl tableRow = new TableRowImpl();
    return tableRow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TableColumnSeparator createTableColumnSeparator()
  {
    TableColumnSeparatorImpl tableColumnSeparator = new TableColumnSeparatorImpl();
    return tableColumnSeparator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Table createTable()
  {
    TableImpl table = new TableImpl();
    return table;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LineSentenceChain createLineSentenceChain()
  {
    LineSentenceChainImpl lineSentenceChain = new LineSentenceChainImpl();
    return lineSentenceChain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SentenceChain createSentenceChain()
  {
    SentenceChainImpl sentenceChain = new SentenceChainImpl();
    return sentenceChain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SentenceChainX createSentenceChainX()
  {
    SentenceChainXImpl sentenceChainX = new SentenceChainXImpl();
    return sentenceChainX;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sentence createSentence()
  {
    SentenceImpl sentence = new SentenceImpl();
    return sentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LineSentence createLineSentence()
  {
    LineSentenceImpl lineSentence = new LineSentenceImpl();
    return lineSentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FreeSentence createFreeSentence()
  {
    FreeSentenceImpl freeSentence = new FreeSentenceImpl();
    return freeSentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SentenceX createSentenceX()
  {
    SentenceXImpl sentenceX = new SentenceXImpl();
    return sentenceX;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListSentence createListSentence()
  {
    ListSentenceImpl listSentence = new ListSentenceImpl();
    return listSentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChapterSentence createChapterSentence()
  {
    ChapterSentenceImpl chapterSentence = new ChapterSentenceImpl();
    return chapterSentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubSentence createSubSentence()
  {
    SubSentenceImpl subSentence = new SubSentenceImpl();
    return subSentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TrailSubSentence createTrailSubSentence()
  {
    TrailSubSentenceImpl trailSubSentence = new TrailSubSentenceImpl();
    return trailSubSentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FreeSubSentence createFreeSubSentence()
  {
    FreeSubSentenceImpl freeSubSentence = new FreeSubSentenceImpl();
    return freeSubSentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LineSubSentence createLineSubSentence()
  {
    LineSubSentenceImpl lineSubSentence = new LineSubSentenceImpl();
    return lineSubSentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NoNElement createNoNElement()
  {
    NoNElementImpl noNElement = new NoNElementImpl();
    return noNElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Brackets createBrackets()
  {
    BracketsImpl brackets = new BracketsImpl();
    return brackets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NoNElementX createNoNElementX()
  {
    NoNElementXImpl noNElementX = new NoNElementXImpl();
    return noNElementX;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NoNElementX2 createNoNElementX2()
  {
    NoNElementX2Impl noNElementX2 = new NoNElementX2Impl();
    return noNElementX2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Elements createElements()
  {
    ElementsImpl elements = new ElementsImpl();
    return elements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AllElements createAllElements()
  {
    AllElementsImpl allElements = new AllElementsImpl();
    return allElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BracketSentence createBracketSentence()
  {
    BracketSentenceImpl bracketSentence = new BracketSentenceImpl();
    return bracketSentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Word createWord()
  {
    WordImpl word = new WordImpl();
    return word;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WordShort createWordShort()
  {
    WordShortImpl wordShort = new WordShortImpl();
    return wordShort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ItWord createItWord()
  {
    ItWordImpl itWord = new ItWordImpl();
    return itWord;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Quote createQuote()
  {
    QuoteImpl quote = new QuoteImpl();
    return quote;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Unit createUnit()
  {
    UnitImpl unit = new UnitImpl();
    return unit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleUnit createSimpleUnit()
  {
    SimpleUnitImpl simpleUnit = new SimpleUnitImpl();
    return simpleUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Chapter_Unit_HI createChapter_Unit_HI()
  {
    Chapter_Unit_HIImpl chapter_Unit_HI = new Chapter_Unit_HIImpl();
    return chapter_Unit_HI;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Chapter_Unit_Low createChapter_Unit_Low()
  {
    Chapter_Unit_LowImpl chapter_Unit_Low = new Chapter_Unit_LowImpl();
    return chapter_Unit_Low;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HashNumber createHashNumber()
  {
    HashNumberImpl hashNumber = new HashNumberImpl();
    return hashNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChapterAlpha createChapterAlpha()
  {
    ChapterAlphaImpl chapterAlpha = new ChapterAlphaImpl();
    return chapterAlpha;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SymbolsX createSymbolsX()
  {
    SymbolsXImpl symbolsX = new SymbolsXImpl();
    return symbolsX;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Symbols createSymbols()
  {
    SymbolsImpl symbols = new SymbolsImpl();
    return symbols;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ShortcutGen createShortcutGen()
  {
    ShortcutGenImpl shortcutGen = new ShortcutGenImpl();
    return shortcutGen;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ShortcutLib createShortcutLib()
  {
    ShortcutLibImpl shortcutLib = new ShortcutLibImpl();
    return shortcutLib;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ShortCut createShortCut()
  {
    ShortCutImpl shortCut = new ShortCutImpl();
    return shortCut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IgnoredText createIgnoredText()
  {
    IgnoredTextImpl ignoredText = new IgnoredTextImpl();
    return ignoredText;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UrlAdress createUrlAdress()
  {
    UrlAdressImpl urlAdress = new UrlAdressImpl();
    return urlAdress;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EmailAT createEmailAT()
  {
    EmailATImpl emailAT = new EmailATImpl();
    return emailAT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MailAdress createMailAdress()
  {
    MailAdressImpl mailAdress = new MailAdressImpl();
    return mailAdress;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Formula createFormula()
  {
    FormulaImpl formula = new FormulaImpl();
    return formula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Array createArray()
  {
    ArrayImpl array = new ArrayImpl();
    return array;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public New_Line createNew_Line()
  {
    New_LineImpl new_Line = new New_LineImpl();
    return new_Line;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExtBracketSentence createExtBracketSentence()
  {
    ExtBracketSentenceImpl extBracketSentence = new ExtBracketSentenceImpl();
    return extBracketSentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EString createEString()
  {
    EStringImpl eString = new EStringImpl();
    return eString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NLXPackage getNLXPackage()
  {
    return (NLXPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static NLXPackage getPackage()
  {
    return NLXPackage.eINSTANCE;
  }

} //NLXFactoryImpl
