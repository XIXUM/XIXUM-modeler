/**
 * generated by Xtext 2.33.0
 */
package org.xixum.latex.texDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.xixum.latex.texDsl.CommandName;
import org.xixum.latex.texDsl.TexDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Command Name</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xixum.latex.texDsl.impl.CommandNameImpl#getLeading <em>Leading</em>}</li>
 *   <li>{@link org.xixum.latex.texDsl.impl.CommandNameImpl#getCName <em>CName</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CommandNameImpl extends MinimalEObjectImpl.Container implements CommandName
{
  /**
   * The default value of the '{@link #getLeading() <em>Leading</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeading()
   * @generated
   * @ordered
   */
  protected static final String LEADING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLeading() <em>Leading</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeading()
   * @generated
   * @ordered
   */
  protected String leading = LEADING_EDEFAULT;

  /**
   * The cached value of the '{@link #getCName() <em>CName</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCName()
   * @generated
   * @ordered
   */
  protected EList<String> cName;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CommandNameImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TexDslPackage.Literals.COMMAND_NAME;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLeading()
  {
    return leading;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeading(String newLeading)
  {
    String oldLeading = leading;
    leading = newLeading;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TexDslPackage.COMMAND_NAME__LEADING, oldLeading, leading));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getCName()
  {
    if (cName == null)
    {
      cName = new EDataTypeEList<String>(String.class, this, TexDslPackage.COMMAND_NAME__CNAME);
    }
    return cName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TexDslPackage.COMMAND_NAME__LEADING:
        return getLeading();
      case TexDslPackage.COMMAND_NAME__CNAME:
        return getCName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TexDslPackage.COMMAND_NAME__LEADING:
        setLeading((String)newValue);
        return;
      case TexDslPackage.COMMAND_NAME__CNAME:
        getCName().clear();
        getCName().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TexDslPackage.COMMAND_NAME__LEADING:
        setLeading(LEADING_EDEFAULT);
        return;
      case TexDslPackage.COMMAND_NAME__CNAME:
        getCName().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TexDslPackage.COMMAND_NAME__LEADING:
        return LEADING_EDEFAULT == null ? leading != null : !LEADING_EDEFAULT.equals(leading);
      case TexDslPackage.COMMAND_NAME__CNAME:
        return cName != null && !cName.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (leading: ");
    result.append(leading);
    result.append(", cName: ");
    result.append(cName);
    result.append(')');
    return result.toString();
  }

} //CommandNameImpl
