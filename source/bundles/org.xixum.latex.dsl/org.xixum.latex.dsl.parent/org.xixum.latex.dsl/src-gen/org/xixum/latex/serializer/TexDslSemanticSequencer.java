/*
 * generated by Xtext 2.33.0
 */
package org.xixum.latex.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xixum.latex.services.TexDslGrammarAccess;
import org.xixum.latex.texDsl.Attributes;
import org.xixum.latex.texDsl.Command;
import org.xixum.latex.texDsl.CommandName;
import org.xixum.latex.texDsl.Document;
import org.xixum.latex.texDsl.Model;
import org.xixum.latex.texDsl.TexDslPackage;
import org.xixum.latex.texDsl.Token;

@SuppressWarnings("all")
public class TexDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TexDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TexDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TexDslPackage.ATTRIBUTES:
				sequence_Attributes(context, (Attributes) semanticObject); 
				return; 
			case TexDslPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case TexDslPackage.COMMAND_NAME:
				sequence_CommandName(context, (CommandName) semanticObject); 
				return; 
			case TexDslPackage.DOCUMENT:
				sequence_Document(context, (Document) semanticObject); 
				return; 
			case TexDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case TexDslPackage.TOKEN:
				sequence_Token(context, (Token) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attributes returns Attributes
	 *
	 * Constraint:
	 *     (key=Token (value=ID_Token | multiValue+=ID_Token+)?)
	 * </pre>
	 */
	protected void sequence_Attributes(ISerializationContext context, Attributes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CommandName returns CommandName
	 *
	 * Constraint:
	 *     (leading=BS cName+=ALPHA_NUMERIC)
	 * </pre>
	 */
	protected void sequence_CommandName(ISerializationContext context, CommandName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Command
	 *
	 * Constraint:
	 *     (command=CommandName (attributes+=Attributes attributes+=Attributes*)? types+=ID_Token*)
	 * </pre>
	 */
	protected void sequence_Command(ISerializationContext context, Command semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Document returns Document
	 *
	 * Constraint:
	 *     (elements+=Token | elements+=Command)*
	 * </pre>
	 */
	protected void sequence_Document(ISerializationContext context, Document semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     document+=Document
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Token returns Token
	 *
	 * Constraint:
	 *     token=ALPHA_NUMERIC
	 * </pre>
	 */
	protected void sequence_Token(ISerializationContext context, Token semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TexDslPackage.Literals.TOKEN__TOKEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TexDslPackage.Literals.TOKEN__TOKEN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTokenAccess().getTokenALPHA_NUMERICTerminalRuleCall_0(), semanticObject.getToken());
		feeder.finish();
	}
	
	
}
