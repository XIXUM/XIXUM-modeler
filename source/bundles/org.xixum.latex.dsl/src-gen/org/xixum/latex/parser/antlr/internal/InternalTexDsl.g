/*
 * generated by Xtext 2.33.0
 */
grammar InternalTexDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xixum.latex.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xixum.latex.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xixum.latex.services.TexDslGrammarAccess;

}

@parser::members {

 	private TexDslGrammarAccess grammarAccess;

    public InternalTexDslParser(TokenStream input, TexDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected TexDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getDocumentDocumentParserRuleCall_0());
			}
			lv_document_0_0=ruleDocument
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"document",
					lv_document_0_0,
					"org.xixum.latex.TexDsl.Document");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleDocument
entryRuleDocument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDocumentRule()); }
	iv_ruleDocument=ruleDocument
	{ $current=$iv_ruleDocument.current; }
	EOF;

// Rule Document
ruleDocument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDocumentAccess().getCommandParserRuleCall_0());
		}
		this_Command_0=ruleCommand
		{
			$current = $this_Command_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDocumentAccess().getTextParserRuleCall_1());
		}
		this_Text_1=ruleText
		{
			$current = $this_Text_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getDocumentAccess().getDocumentAction_2_0(),
						$current);
				}
			)
			this_END_3=RULE_END
			{
				newLeafNode(this_END_3, grammarAccess.getDocumentAccess().getENDTerminalRuleCall_2_1());
			}
		)
	)
;

// Entry rule entryRuleText
entryRuleText returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextRule()); }
	iv_ruleText=ruleText
	{ $current=$iv_ruleText.current; }
	EOF;

// Rule Text
ruleText returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getTextAccess().getTokenAnyTextParserRuleCall_0());
			}
			lv_token_0_0=ruleAnyText
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getTextRule());
				}
				add(
					$current,
					"token",
					lv_token_0_0,
					"org.xixum.latex.TexDsl.AnyText");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleAnyText
entryRuleAnyText returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAnyTextRule()); }
	iv_ruleAnyText=ruleAnyText
	{ $current=$iv_ruleAnyText.current.getText(); }
	EOF;

// Rule AnyText
ruleAnyText returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getAnyTextAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_ANY_OTHER_1=RULE_ANY_OTHER
		{
			$current.merge(this_ANY_OTHER_1);
		}
		{
			newLeafNode(this_ANY_OTHER_1, grammarAccess.getAnyTextAccess().getANY_OTHERTerminalRuleCall_1());
		}
		    |
		this_KOMMA_2=RULE_KOMMA
		{
			$current.merge(this_KOMMA_2);
		}
		{
			newLeafNode(this_KOMMA_2, grammarAccess.getAnyTextAccess().getKOMMATerminalRuleCall_2());
		}
		    |
		this_PIPE_3=RULE_PIPE
		{
			$current.merge(this_PIPE_3);
		}
		{
			newLeafNode(this_PIPE_3, grammarAccess.getAnyTextAccess().getPIPETerminalRuleCall_3());
		}
		    |
		this_EXCL_4=RULE_EXCL
		{
			$current.merge(this_EXCL_4);
		}
		{
			newLeafNode(this_EXCL_4, grammarAccess.getAnyTextAccess().getEXCLTerminalRuleCall_4());
		}
		    |
		this_SYMBOL_5=RULE_SYMBOL
		{
			$current.merge(this_SYMBOL_5);
		}
		{
			newLeafNode(this_SYMBOL_5, grammarAccess.getAnyTextAccess().getSYMBOLTerminalRuleCall_5());
		}
		    |
		this_DOT_6=RULE_DOT
		{
			$current.merge(this_DOT_6);
		}
		{
			newLeafNode(this_DOT_6, grammarAccess.getAnyTextAccess().getDOTTerminalRuleCall_6());
		}
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_command_0_0=RULE_ID_COMM
				{
					newLeafNode(lv_command_0_0, grammarAccess.getCommandAccess().getCommandID_COMMTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommandRule());
					}
					setWithLastConsumed(
						$current,
						"command",
						lv_command_0_0,
						"org.xixum.latex.TexDsl.ID_COMM");
				}
			)
		)
		(
			this_SQBO_1=RULE_SQBO
			{
				newLeafNode(this_SQBO_1, grammarAccess.getCommandAccess().getSQBOTerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandAccess().getAttrsAttributesParserRuleCall_1_1_0());
					}
					lv_attrs_2_0=ruleAttributes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandRule());
						}
						add(
							$current,
							"attrs",
							lv_attrs_2_0,
							"org.xixum.latex.TexDsl.Attributes");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				this_KOMMA_3=RULE_KOMMA
				{
					newLeafNode(this_KOMMA_3, grammarAccess.getCommandAccess().getKOMMATerminalRuleCall_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCommandAccess().getAttrsAttributesParserRuleCall_1_2_1_0());
						}
						lv_attrs_4_0=ruleAttributes
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCommandRule());
							}
							add(
								$current,
								"attrs",
								lv_attrs_4_0,
								"org.xixum.latex.TexDsl.Attributes");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			this_SQBC_5=RULE_SQBC
			{
				newLeafNode(this_SQBC_5, grammarAccess.getCommandAccess().getSQBCTerminalRuleCall_1_3());
			}
		)?
		(
			this_CUBO_6=RULE_CUBO
			{
				newLeafNode(this_CUBO_6, grammarAccess.getCommandAccess().getCUBOTerminalRuleCall_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandAccess().getTokensCompoundParserRuleCall_2_1_0());
					}
					lv_tokens_7_0=ruleCompound
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandRule());
						}
						add(
							$current,
							"tokens",
							lv_tokens_7_0,
							"org.xixum.latex.TexDsl.Compound");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					this_PIPE_8=RULE_PIPE
					{
						newLeafNode(this_PIPE_8, grammarAccess.getCommandAccess().getPIPETerminalRuleCall_2_2_0_0());
					}
					    |
					this_EXCL_9=RULE_EXCL
					{
						newLeafNode(this_EXCL_9, grammarAccess.getCommandAccess().getEXCLTerminalRuleCall_2_2_0_1());
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getCommandAccess().getTokensCompoundParserRuleCall_2_2_1_0());
						}
						lv_tokens_10_0=ruleCompound
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCommandRule());
							}
							add(
								$current,
								"tokens",
								lv_tokens_10_0,
								"org.xixum.latex.TexDsl.Compound");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			this_CUBC_11=RULE_CUBC
			{
				newLeafNode(this_CUBC_11, grammarAccess.getCommandAccess().getCUBCTerminalRuleCall_2_3());
			}
		)?
	)
;

// Entry rule entryRuleMulti
entryRuleMulti returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiRule()); }
	iv_ruleMulti=ruleMulti
	{ $current=$iv_ruleMulti.current; }
	EOF;

// Rule Multi
ruleMulti returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_tokens_0_0=RULE_ID
			{
				newLeafNode(lv_tokens_0_0, grammarAccess.getMultiAccess().getTokensIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getMultiRule());
				}
				addWithLastConsumed(
					$current,
					"tokens",
					lv_tokens_0_0,
					"org.xixum.latex.TexDsl.ID");
			}
		)
	)+
;

// Entry rule entryRuleCommandExt
entryRuleCommandExt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandExtRule()); }
	iv_ruleCommandExt=ruleCommandExt
	{ $current=$iv_ruleCommandExt.current; }
	EOF;

// Rule CommandExt
ruleCommandExt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_command_0_1=RULE_ID
					{
						newLeafNode(lv_command_0_1, grammarAccess.getCommandExtAccess().getCommandIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCommandExtRule());
						}
						setWithLastConsumed(
							$current,
							"command",
							lv_command_0_1,
							"org.xixum.latex.TexDsl.ID");
					}
					    |
					lv_command_0_2=RULE_ID_COMM
					{
						newLeafNode(lv_command_0_2, grammarAccess.getCommandExtAccess().getCommandID_COMMTerminalRuleCall_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCommandExtRule());
						}
						setWithLastConsumed(
							$current,
							"command",
							lv_command_0_2,
							"org.xixum.latex.TexDsl.ID_COMM");
					}
				)
			)
		)
		(
			this_CUBO_1=RULE_CUBO
			{
				newLeafNode(this_CUBO_1, grammarAccess.getCommandExtAccess().getCUBOTerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandExtAccess().getTokensCompoundParserRuleCall_1_1_0());
					}
					lv_tokens_2_0=ruleCompound
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandExtRule());
						}
						add(
							$current,
							"tokens",
							lv_tokens_2_0,
							"org.xixum.latex.TexDsl.Compound");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				this_KOMMA_3=RULE_KOMMA
				{
					newLeafNode(this_KOMMA_3, grammarAccess.getCommandExtAccess().getKOMMATerminalRuleCall_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCommandExtAccess().getTokensCompoundParserRuleCall_1_2_1_0());
						}
						lv_tokens_4_0=ruleCompound
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCommandExtRule());
							}
							add(
								$current,
								"tokens",
								lv_tokens_4_0,
								"org.xixum.latex.TexDsl.Compound");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			this_CUBC_5=RULE_CUBC
			{
				newLeafNode(this_CUBC_5, grammarAccess.getCommandExtAccess().getCUBCTerminalRuleCall_1_3());
			}
		)
	)
;

// Entry rule entryRuleCompound
entryRuleCompound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompoundRule()); }
	iv_ruleCompound=ruleCompound
	{ $current=$iv_ruleCompound.current; }
	EOF;

// Rule Compound
ruleCompound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompoundAccess().getMultiParserRuleCall_0());
		}
		this_Multi_0=ruleMulti
		{
			$current = $this_Multi_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCompoundAccess().getExtrasParserRuleCall_1());
		}
		this_Extras_1=ruleExtras
		{
			$current = $this_Extras_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(ruleCommandExt)=>
			{
				newCompositeNode(grammarAccess.getCompoundAccess().getCommandExtParserRuleCall_2());
			}
			this_CommandExt_2=ruleCommandExt
			{
				$current = $this_CommandExt_2.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleExtras
entryRuleExtras returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtrasRule()); }
	iv_ruleExtras=ruleExtras
	{ $current=$iv_ruleExtras.current; }
	EOF;

// Rule Extras
ruleExtras returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_tokens_0_1=RULE_BO
				{
					newLeafNode(lv_tokens_0_1, grammarAccess.getExtrasAccess().getTokensBOTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExtrasRule());
					}
					addWithLastConsumed(
						$current,
						"tokens",
						lv_tokens_0_1,
						"org.xixum.latex.TexDsl.BO");
				}
				    |
				lv_tokens_0_2=RULE_BC
				{
					newLeafNode(lv_tokens_0_2, grammarAccess.getExtrasAccess().getTokensBCTerminalRuleCall_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExtrasRule());
					}
					addWithLastConsumed(
						$current,
						"tokens",
						lv_tokens_0_2,
						"org.xixum.latex.TexDsl.BC");
				}
			)
		)
	)+
;

// Entry rule entryRuleAttributes
entryRuleAttributes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributesRule()); }
	iv_ruleAttributes=ruleAttributes
	{ $current=$iv_ruleAttributes.current; }
	EOF;

// Rule Attributes
ruleAttributes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_key_0_0=RULE_ID
				{
					newLeafNode(lv_key_0_0, grammarAccess.getAttributesAccess().getKeyIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributesRule());
					}
					setWithLastConsumed(
						$current,
						"key",
						lv_key_0_0,
						"org.xixum.latex.TexDsl.ID");
				}
			)
		)
		(
			this_EQ_1=RULE_EQ
			{
				newLeafNode(this_EQ_1, grammarAccess.getAttributesAccess().getEQTerminalRuleCall_1_0());
			}
			(
				(
					this_CUBO_2=RULE_CUBO
					{
						newLeafNode(this_CUBO_2, grammarAccess.getAttributesAccess().getCUBOTerminalRuleCall_1_1_0_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getAttributesAccess().getMultiMultiParserRuleCall_1_1_0_1_0());
							}
							lv_multi_3_0=ruleMulti
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAttributesRule());
								}
								add(
									$current,
									"multi",
									lv_multi_3_0,
									"org.xixum.latex.TexDsl.Multi");
								afterParserOrEnumRuleCall();
							}
						)
					)+
					this_CUBC_4=RULE_CUBC
					{
						newLeafNode(this_CUBC_4, grammarAccess.getAttributesAccess().getCUBCTerminalRuleCall_1_1_0_2());
					}
				)
				    |
				(
					(
						lv_single_5_0=RULE_ID
						{
							newLeafNode(lv_single_5_0, grammarAccess.getAttributesAccess().getSingleIDTerminalRuleCall_1_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAttributesRule());
							}
							setWithLastConsumed(
								$current,
								"single",
								lv_single_5_0,
								"org.xixum.latex.TexDsl.ID");
						}
					)
				)
			)
		)?
	)
;

RULE_SL_COMMENT : '%' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : (RULE_ALPHA|RULE_SYMBOL) (RULE_ALPHA|RULE_SYMBOL|RULE_NUMERIC|RULE_DOT|RULE_AND)*;

fragment RULE_BS : '\\';

RULE_ID_COMM : RULE_BS RULE_ID;

fragment RULE_ALPHA : (RULE_ALPHAC|RULE_ALPHAS|RULE_D_QUOTE|RULE_S_QUOTE);

fragment RULE_ALPHAC : ('A'..'Z'|'\u00C4'..'\u00DC'|'\u00C0'..'\u00D9'|'\u00C1'..'\u00DA');

fragment RULE_ALPHAS : ('a'..'z'|'\u00E4'..'\u00FC'|'\u00DF'|'\u00E0'..'\u00F9'|'\u00E1'..'\u00FA');

fragment RULE_NUMERIC : '0'..'9';

RULE_SQBO : '[';

RULE_SQBC : ']';

RULE_BO : '(';

RULE_BC : ')';

RULE_CUBO : '{';

RULE_CUBC : '}';

RULE_KOMMA : ',';

RULE_EQ : '=';

RULE_DOT : '.';

fragment RULE_AND : '&';

RULE_PIPE : '|';

RULE_EXCL : '!';

fragment RULE_SPACE : ' ';

RULE_SYMBOL : ('-'|'_'|'+'|'#'|'~');

fragment RULE_D_QUOTE : '"';

fragment RULE_S_QUOTE : '\'';

RULE_END : EOF;

RULE_WS : (RULE_SPACE|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
