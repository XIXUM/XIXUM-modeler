/*
 * generated by Xtext 2.33.0
 */
grammar InternalTexDsl;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package org.xixum.latex.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xixum.latex.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xixum.latex.services.TexDslGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private TexDslGrammarAccess grammarAccess;

    public InternalTexDslParser(TokenStream input, TexDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected TexDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getElementsElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xixum.latex.TexDsl.Element");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getElementAccess().getCommandParserRuleCall_0());
		}
		this_Command_0=ruleCommand
		{
			$current = $this_Command_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getElementAccess().getTextContentParserRuleCall_1());
		}
		this_TextContent_1=ruleTextContent
		{
			$current = $this_TextContent_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getElementAccess().getMathExpressionParserRuleCall_2());
		}
		this_MathExpression_2=ruleMathExpression
		{
			$current = $this_MathExpression_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='\\'
		{
			newLeafNode(otherlv_0, grammarAccess.getCommandAccess().getBackslashKeyword_0());
		}
		(
			(
				lv_command_1_0=RULE_ID
				{
					newLeafNode(lv_command_1_0, grammarAccess.getCommandAccess().getCommandIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommandRule());
					}
					setWithLastConsumed(
						$current,
						"command",
						lv_command_1_0,
						"org.xixum.latex.TexDsl.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandAccess().getOptionalArgsOptionalArgumentParserRuleCall_2_0());
				}
				lv_optionalArgs_2_0=ruleOptionalArgument
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandRule());
					}
					add(
						$current,
						"optionalArgs",
						lv_optionalArgs_2_0,
						"org.xixum.latex.TexDsl.OptionalArgument");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandAccess().getMandatoryArgsMandatoryArgumentParserRuleCall_3_0());
				}
				lv_mandatoryArgs_3_0=ruleMandatoryArgument
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandRule());
					}
					add(
						$current,
						"mandatoryArgs",
						lv_mandatoryArgs_3_0,
						"org.xixum.latex.TexDsl.MandatoryArgument");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleOptionalArgument
entryRuleOptionalArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOptionalArgumentRule()); }
	iv_ruleOptionalArgument=ruleOptionalArgument
	{ $current=$iv_ruleOptionalArgument.current; }
	EOF;

// Rule OptionalArgument
ruleOptionalArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getOptionalArgumentAccess().getOptionalArgumentAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getOptionalArgumentAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOptionalArgumentAccess().getContentArgumentContentParserRuleCall_2_0());
				}
				lv_content_2_0=ruleArgumentContent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOptionalArgumentRule());
					}
					add(
						$current,
						"content",
						lv_content_2_0,
						"org.xixum.latex.TexDsl.ArgumentContent");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getOptionalArgumentAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleMandatoryArgument
entryRuleMandatoryArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMandatoryArgumentRule()); }
	iv_ruleMandatoryArgument=ruleMandatoryArgument
	{ $current=$iv_ruleMandatoryArgument.current; }
	EOF;

// Rule MandatoryArgument
ruleMandatoryArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getMandatoryArgumentAccess().getMandatoryArgumentAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getMandatoryArgumentAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMandatoryArgumentAccess().getContentArgumentContentParserRuleCall_2_0());
				}
				lv_content_2_0=ruleArgumentContent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMandatoryArgumentRule());
					}
					add(
						$current,
						"content",
						lv_content_2_0,
						"org.xixum.latex.TexDsl.ArgumentContent");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getMandatoryArgumentAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleArgumentContent
entryRuleArgumentContent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentContentRule()); }
	iv_ruleArgumentContent=ruleArgumentContent
	{ $current=$iv_ruleArgumentContent.current; }
	EOF;

// Rule ArgumentContent
ruleArgumentContent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getArgumentContentAccess().getTextContentParserRuleCall_0());
		}
		this_TextContent_0=ruleTextContent
		{
			$current = $this_TextContent_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getArgumentContentAccess().getCommandParserRuleCall_1());
		}
		this_Command_1=ruleCommand
		{
			$current = $this_Command_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getArgumentContentAccess().getMathExpressionParserRuleCall_2());
		}
		this_MathExpression_2=ruleMathExpression
		{
			$current = $this_MathExpression_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTextContainer
entryRuleTextContainer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextContainerRule()); }
	iv_ruleTextContainer=ruleTextContainer
	{ $current=$iv_ruleTextContainer.current; }
	EOF;

// Rule TextContainer
ruleTextContainer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_text_0_0=RULE_TEXT
			{
				newLeafNode(lv_text_0_0, grammarAccess.getTextContainerAccess().getTextTEXTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTextContainerRule());
				}
				addWithLastConsumed(
					$current,
					"text",
					lv_text_0_0,
					"org.xixum.latex.TexDsl.TEXT");
			}
		)
	)+
;

// Entry rule entryRuleTextContent
entryRuleTextContent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextContentRule()); }
	iv_ruleTextContent=ruleTextContent
	{ $current=$iv_ruleTextContent.current; }
	EOF;

// Rule TextContent
ruleTextContent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTextContentAccess().getIdentifiersParserRuleCall_0());
		}
		this_Identifiers_0=ruleIdentifiers
		{
			$current = $this_Identifiers_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTextContentAccess().getTextContainerParserRuleCall_1());
		}
		this_TextContainer_1=ruleTextContainer
		{
			$current = $this_TextContainer_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTextContentAccess().getOperatorsParserRuleCall_2());
		}
		this_Operators_2=ruleOperators
		{
			$current = $this_Operators_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTextContentAccess().getNumbersParserRuleCall_3());
		}
		this_Numbers_3=ruleNumbers
		{
			$current = $this_Numbers_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTextContentAccess().getOptionalArgumentParserRuleCall_4());
		}
		this_OptionalArgument_4=ruleOptionalArgument
		{
			$current = $this_OptionalArgument_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTextContentAccess().getMandatoryArgumentParserRuleCall_5());
		}
		this_MandatoryArgument_5=ruleMandatoryArgument
		{
			$current = $this_MandatoryArgument_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIdentifiers
entryRuleIdentifiers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentifiersRule()); }
	iv_ruleIdentifiers=ruleIdentifiers
	{ $current=$iv_ruleIdentifiers.current; }
	EOF;

// Rule Identifiers
ruleIdentifiers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_id_0_0=RULE_ID
			{
				newLeafNode(lv_id_0_0, grammarAccess.getIdentifiersAccess().getIdIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIdentifiersRule());
				}
				setWithLastConsumed(
					$current,
					"id",
					lv_id_0_0,
					"org.xixum.latex.TexDsl.ID");
			}
		)
	)
;

// Entry rule entryRuleNumbers
entryRuleNumbers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumbersRule()); }
	iv_ruleNumbers=ruleNumbers
	{ $current=$iv_ruleNumbers.current; }
	EOF;

// Rule Numbers
ruleNumbers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_num_0_0=RULE_NUMBER
			{
				newLeafNode(lv_num_0_0, grammarAccess.getNumbersAccess().getNumNUMBERTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNumbersRule());
				}
				setWithLastConsumed(
					$current,
					"num",
					lv_num_0_0,
					"org.xixum.latex.TexDsl.NUMBER");
			}
		)
	)
;

// Entry rule entryRuleOperators
entryRuleOperators returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperatorsRule()); }
	iv_ruleOperators=ruleOperators
	{ $current=$iv_ruleOperators.current; }
	EOF;

// Rule Operators
ruleOperators returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_op_0_0=RULE_SYMBOL
			{
				newLeafNode(lv_op_0_0, grammarAccess.getOperatorsAccess().getOpSYMBOLTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getOperatorsRule());
				}
				addWithLastConsumed(
					$current,
					"op",
					lv_op_0_0,
					"org.xixum.latex.TexDsl.SYMBOL");
			}
		)
	)+
;

// Entry rule entryRuleMathExpression
entryRuleMathExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMathExpressionRule()); }
	iv_ruleMathExpression=ruleMathExpression
	{ $current=$iv_ruleMathExpression.current; }
	EOF;

// Rule MathExpression
ruleMathExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMathExpressionAccess().getInlineMathParserRuleCall_0());
		}
		this_InlineMath_0=ruleInlineMath
		{
			$current = $this_InlineMath_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMathExpressionAccess().getDisplayMathParserRuleCall_1());
		}
		this_DisplayMath_1=ruleDisplayMath
		{
			$current = $this_DisplayMath_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInlineMath
entryRuleInlineMath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInlineMathRule()); }
	iv_ruleInlineMath=ruleInlineMath
	{ $current=$iv_ruleInlineMath.current; }
	EOF;

// Rule InlineMath
ruleInlineMath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getInlineMathAccess().getInlineMathAction_0(),
					$current);
			}
		)
		otherlv_1='$'
		{
			newLeafNode(otherlv_1, grammarAccess.getInlineMathAccess().getDollarSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInlineMathAccess().getContentMathContentParserRuleCall_2_0());
				}
				lv_content_2_0=ruleMathContent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInlineMathRule());
					}
					add(
						$current,
						"content",
						lv_content_2_0,
						"org.xixum.latex.TexDsl.MathContent");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='$'
		{
			newLeafNode(otherlv_3, grammarAccess.getInlineMathAccess().getDollarSignKeyword_3());
		}
	)
;

// Entry rule entryRuleDisplayMath
entryRuleDisplayMath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDisplayMathRule()); }
	iv_ruleDisplayMath=ruleDisplayMath
	{ $current=$iv_ruleDisplayMath.current; }
	EOF;

// Rule DisplayMath
ruleDisplayMath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getDisplayMathAccess().getDisplayMathAction_0(),
					$current);
			}
		)
		otherlv_1='$$'
		{
			newLeafNode(otherlv_1, grammarAccess.getDisplayMathAccess().getDollarSignDollarSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDisplayMathAccess().getContentMathContentParserRuleCall_2_0());
				}
				lv_content_2_0=ruleMathContent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDisplayMathRule());
					}
					add(
						$current,
						"content",
						lv_content_2_0,
						"org.xixum.latex.TexDsl.MathContent");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='$$'
		{
			newLeafNode(otherlv_3, grammarAccess.getDisplayMathAccess().getDollarSignDollarSignKeyword_3());
		}
	)
;

// Entry rule entryRuleMathContent
entryRuleMathContent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMathContentRule()); }
	iv_ruleMathContent=ruleMathContent
	{ $current=$iv_ruleMathContent.current; }
	EOF;

// Rule MathContent
ruleMathContent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMathContentAccess().getCommandParserRuleCall_0());
		}
		this_Command_0=ruleCommand
		{
			$current = $this_Command_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMathContentAccess().getTextContentParserRuleCall_1());
		}
		this_TextContent_1=ruleTextContent
		{
			$current = $this_TextContent_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMathContentAccess().getNumbersParserRuleCall_2());
		}
		this_Numbers_2=ruleNumbers
		{
			$current = $this_Numbers_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMathContentAccess().getOperatorsParserRuleCall_3());
		}
		this_Operators_3=ruleOperators
		{
			$current = $this_Operators_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

RULE_SYMBOL : ('+'|'-'|'='|'/'|'*'|'^'|'_'|'<'|'>'|'&'|'%'|'#');

RULE_SL_COMMENT : '%' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_NUMBER : RULE_INT ('.' RULE_INT)?;

fragment RULE_INT : ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_TEXT : ~(('\\'|'$'|'{'|'}'|'['|']'|'^'|'_'|' '|'\t'|'\r'|'\n'))+;
