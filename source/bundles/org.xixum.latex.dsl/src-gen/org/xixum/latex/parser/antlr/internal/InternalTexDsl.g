/*
 * generated by Xtext 2.33.0
 */
grammar InternalTexDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xixum.latex.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xixum.latex.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xixum.latex.services.TexDslGrammarAccess;

}

@parser::members {

 	private TexDslGrammarAccess grammarAccess;

    public InternalTexDslParser(TokenStream input, TexDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected TexDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getDocumentDocumentParserRuleCall_0());
			}
			lv_document_0_0=ruleDocument
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"document",
					lv_document_0_0,
					"org.xixum.latex.TexDsl.Document");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleDocument
entryRuleDocument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDocumentRule()); }
	iv_ruleDocument=ruleDocument
	{ $current=$iv_ruleDocument.current; }
	EOF;

// Rule Document
ruleDocument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDocumentAccess().getElementsTokenParserRuleCall_0_0_0());
					}
					lv_elements_0_1=ruleToken
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDocumentRule());
						}
						add(
							$current,
							"elements",
							lv_elements_0_1,
							"org.xixum.latex.TexDsl.Token");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getDocumentAccess().getElementsCommandParserRuleCall_0_0_1());
					}
					lv_elements_0_2=ruleCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDocumentRule());
						}
						add(
							$current,
							"elements",
							lv_elements_0_2,
							"org.xixum.latex.TexDsl.Command");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getDocumentAccess().getDocumentAction_1_0(),
						$current);
				}
			)
			this_END_2=RULE_END
			{
				newLeafNode(this_END_2, grammarAccess.getDocumentAccess().getENDTerminalRuleCall_1_1());
			}
		)
	)
;

// Entry rule entryRuleToken
entryRuleToken returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTokenRule()); }
	iv_ruleToken=ruleToken
	{ $current=$iv_ruleToken.current; }
	EOF;

// Rule Token
ruleToken returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_token_0_0=RULE_ALPHA_NUMERIC
			{
				newLeafNode(lv_token_0_0, grammarAccess.getTokenAccess().getTokenALPHA_NUMERICTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTokenRule());
				}
				setWithLastConsumed(
					$current,
					"token",
					lv_token_0_0,
					"org.xixum.latex.TexDsl.ALPHA_NUMERIC");
			}
		)
	)
;

// Entry rule entryRuleID_Token
entryRuleID_Token returns [String current=null]:
	{ newCompositeNode(grammarAccess.getID_TokenRule()); }
	iv_ruleID_Token=ruleID_Token
	{ $current=$iv_ruleID_Token.current.getText(); }
	EOF;

// Rule ID_Token
ruleID_Token returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getID_TokenAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_ALPHA_NUMERIC_1=RULE_ALPHA_NUMERIC
		{
			$current.merge(this_ALPHA_NUMERIC_1);
		}
		{
			newLeafNode(this_ALPHA_NUMERIC_1, grammarAccess.getID_TokenAccess().getALPHA_NUMERICTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleID_WS
entryRuleID_WS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getID_WSRule()); }
	iv_ruleID_WS=ruleID_WS
	{ $current=$iv_ruleID_WS.current.getText(); }
	EOF;

// Rule ID_WS
ruleID_WS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_BS_0=RULE_BS
			{
				$current.merge(this_BS_0);
			}
			{
				newLeafNode(this_BS_0, grammarAccess.getID_WSAccess().getBSTerminalRuleCall_0());
			}
		)?
		(
			this_ID_1=RULE_ID
			{
				$current.merge(this_ID_1);
			}
			{
				newLeafNode(this_ID_1, grammarAccess.getID_WSAccess().getIDTerminalRuleCall_1_0());
			}
			    |
			this_ALPHA_NUMERIC_2=RULE_ALPHA_NUMERIC
			{
				$current.merge(this_ALPHA_NUMERIC_2);
			}
			{
				newLeafNode(this_ALPHA_NUMERIC_2, grammarAccess.getID_WSAccess().getALPHA_NUMERICTerminalRuleCall_1_1());
			}
			    |
			this_BO_3=RULE_BO
			{
				$current.merge(this_BO_3);
			}
			{
				newLeafNode(this_BO_3, grammarAccess.getID_WSAccess().getBOTerminalRuleCall_1_2());
			}
			    |
			this_BC_4=RULE_BC
			{
				$current.merge(this_BC_4);
			}
			{
				newLeafNode(this_BC_4, grammarAccess.getID_WSAccess().getBCTerminalRuleCall_1_3());
			}
		)
		(
			this_SPACE_5=RULE_SPACE
			{
				$current.merge(this_SPACE_5);
			}
			{
				newLeafNode(this_SPACE_5, grammarAccess.getID_WSAccess().getSPACETerminalRuleCall_2_0());
			}
			(
				this_ID_6=RULE_ID
				{
					$current.merge(this_ID_6);
				}
				{
					newLeafNode(this_ID_6, grammarAccess.getID_WSAccess().getIDTerminalRuleCall_2_1_0());
				}
				    |
				this_ALPHA_NUMERIC_7=RULE_ALPHA_NUMERIC
				{
					$current.merge(this_ALPHA_NUMERIC_7);
				}
				{
					newLeafNode(this_ALPHA_NUMERIC_7, grammarAccess.getID_WSAccess().getALPHA_NUMERICTerminalRuleCall_2_1_1());
				}
				    |
				this_BO_8=RULE_BO
				{
					$current.merge(this_BO_8);
				}
				{
					newLeafNode(this_BO_8, grammarAccess.getID_WSAccess().getBOTerminalRuleCall_2_1_2());
				}
				    |
				this_BC_9=RULE_BC
				{
					$current.merge(this_BC_9);
				}
				{
					newLeafNode(this_BC_9, grammarAccess.getID_WSAccess().getBCTerminalRuleCall_2_1_3());
				}
			)
		)*
	)
;

// Entry rule entryRuleSubCommName
entryRuleSubCommName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubCommNameRule()); }
	iv_ruleSubCommName=ruleSubCommName
	{ $current=$iv_ruleSubCommName.current; }
	EOF;

// Rule SubCommName
ruleSubCommName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSubCommNameAccess().getIdID_WSParserRuleCall_0_0());
				}
				lv_id_0_0=ruleID_WS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubCommNameRule());
					}
					set(
						$current,
						"id",
						lv_id_0_0,
						"org.xixum.latex.TexDsl.ID_WS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSubCommNameAccess().getSubCommandSubCommandParserRuleCall_1_0());
				}
				lv_subCommand_1_0=ruleSubCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubCommNameRule());
					}
					set(
						$current,
						"subCommand",
						lv_subCommand_1_0,
						"org.xixum.latex.TexDsl.SubCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleCommandName
entryRuleCommandName returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getCommandNameRule()); }
	iv_ruleCommandName=ruleCommandName
	{ $current=$iv_ruleCommandName.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule CommandName
ruleCommandName returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_leading_0_0=RULE_BS
				{
					newLeafNode(lv_leading_0_0, grammarAccess.getCommandNameAccess().getLeadingBSTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommandNameRule());
					}
					setWithLastConsumed(
						$current,
						"leading",
						lv_leading_0_0,
						"org.xixum.latex.TexDsl.BS");
				}
			)
		)
		(
			(
				lv_cName_1_0=RULE_ALPHA_NUMERIC
				{
					newLeafNode(lv_cName_1_0, grammarAccess.getCommandNameAccess().getCNameALPHA_NUMERICTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommandNameRule());
					}
					setWithLastConsumed(
						$current,
						"cName",
						lv_cName_1_0,
						"org.xixum.latex.TexDsl.ALPHA_NUMERIC");
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSubCommand
entryRuleSubCommand returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getSubCommandRule()); }
	iv_ruleSubCommand=ruleSubCommand
	{ $current=$iv_ruleSubCommand.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule SubCommand
ruleSubCommand returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		this_CUBO_0=RULE_CUBO
		{
			newLeafNode(this_CUBO_0, grammarAccess.getSubCommandAccess().getCUBOTerminalRuleCall_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubCommandAccess().getTypesSubCommNameParserRuleCall_1_0());
				}
				lv_types_1_0=ruleSubCommName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubCommandRule());
					}
					add(
						$current,
						"types",
						lv_types_1_0,
						"org.xixum.latex.TexDsl.SubCommName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_PIPE_2=RULE_PIPE
			{
				newLeafNode(this_PIPE_2, grammarAccess.getSubCommandAccess().getPIPETerminalRuleCall_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSubCommandAccess().getTypesSubCommNameParserRuleCall_2_1_0());
					}
					lv_types_3_0=ruleSubCommName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubCommandRule());
						}
						add(
							$current,
							"types",
							lv_types_3_0,
							"org.xixum.latex.TexDsl.SubCommName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		this_CUBC_4=RULE_CUBC
		{
			newLeafNode(this_CUBC_4, grammarAccess.getSubCommandAccess().getCUBCTerminalRuleCall_3());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCommandParameters
entryRuleCommandParameters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandParametersRule()); }
	iv_ruleCommandParameters=ruleCommandParameters
	{ $current=$iv_ruleCommandParameters.current; }
	EOF;

// Rule CommandParameters
ruleCommandParameters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_SQBO_0=RULE_SQBO
		{
			newLeafNode(this_SQBO_0, grammarAccess.getCommandParametersAccess().getSQBOTerminalRuleCall_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandParametersAccess().getAttributesAttributesParserRuleCall_1_0());
				}
				lv_attributes_1_0=ruleAttributes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandParametersRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_1_0,
						"org.xixum.latex.TexDsl.Attributes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_KOMMA_2=RULE_KOMMA
			{
				newLeafNode(this_KOMMA_2, grammarAccess.getCommandParametersAccess().getKOMMATerminalRuleCall_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandParametersAccess().getAttributesAttributesParserRuleCall_2_1_0());
					}
					lv_attributes_3_0=ruleAttributes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandParametersRule());
						}
						add(
							$current,
							"attributes",
							lv_attributes_3_0,
							"org.xixum.latex.TexDsl.Attributes");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		this_SQBC_4=RULE_SQBC
		{
			newLeafNode(this_SQBC_4, grammarAccess.getCommandParametersAccess().getSQBCTerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandAccess().getCommandCommandNameParserRuleCall_0_0());
				}
				lv_command_0_0=ruleCommandName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandRule());
					}
					set(
						$current,
						"command",
						lv_command_0_0,
						"org.xixum.latex.TexDsl.CommandName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandAccess().getParametersCommandParametersParserRuleCall_1_0());
				}
				lv_parameters_1_0=ruleCommandParameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_1_0,
						"org.xixum.latex.TexDsl.CommandParameters");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandAccess().getSubCommandSubCommandParserRuleCall_2_0());
				}
				lv_subCommand_2_0=ruleSubCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandRule());
					}
					set(
						$current,
						"subCommand",
						lv_subCommand_2_0,
						"org.xixum.latex.TexDsl.SubCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAttributes
entryRuleAttributes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributesRule()); }
	iv_ruleAttributes=ruleAttributes
	{ $current=$iv_ruleAttributes.current; }
	EOF;

// Rule Attributes
ruleAttributes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributesAccess().getKeyID_TokenParserRuleCall_0_0());
				}
				lv_key_0_0=ruleID_Token
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributesRule());
					}
					set(
						$current,
						"key",
						lv_key_0_0,
						"org.xixum.latex.TexDsl.ID_Token");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_EQ_1=RULE_EQ
			{
				newLeafNode(this_EQ_1, grammarAccess.getAttributesAccess().getEQTerminalRuleCall_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAttributesAccess().getValueID_TokenParserRuleCall_1_1_0_0());
						}
						lv_value_2_0=ruleID_Token
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAttributesRule());
							}
							set(
								$current,
								"value",
								lv_value_2_0,
								"org.xixum.latex.TexDsl.ID_Token");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					this_CUBO_3=RULE_CUBO
					{
						newLeafNode(this_CUBO_3, grammarAccess.getAttributesAccess().getCUBOTerminalRuleCall_1_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getAttributesAccess().getMultiValueID_TokenParserRuleCall_1_1_1_1_0());
							}
							lv_multiValue_4_0=ruleID_Token
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAttributesRule());
								}
								add(
									$current,
									"multiValue",
									lv_multiValue_4_0,
									"org.xixum.latex.TexDsl.ID_Token");
								afterParserOrEnumRuleCall();
							}
						)
					)+
					this_CUBC_5=RULE_CUBC
					{
						newLeafNode(this_CUBC_5, grammarAccess.getAttributesAccess().getCUBCTerminalRuleCall_1_1_1_2());
					}
				)
			)
		)?
	)
;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '%' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_BS : '\\';

RULE_SYMBOLS : RULE_SYMBOL+;

RULE_ALPHA_NUMERIC : RULE_ALPHA+ (RULE_NUMERIC+ RULE_ALPHA+)* RULE_NUMERIC*;

RULE_ID : (RULE_ALPHA|RULE_SYMBOL) (RULE_ALPHA|RULE_SYMBOL|RULE_NUMERIC|RULE_DOT|RULE_AND)*;

fragment RULE_ALPHA : (RULE_ALPHAC|RULE_ALPHAS);

fragment RULE_ALPHAC : ('A'..'Z'|'\u00C4'..'\u00DC'|'\u00C0'..'\u00D9'|'\u00C1'..'\u00DA');

fragment RULE_ALPHAS : ('a'..'z'|'\u00E4'..'\u00FC'|'\u00DF'|'\u00E0'..'\u00F9'|'\u00E1'..'\u00FA');

fragment RULE_NUMERIC : '0'..'9';

RULE_SQBO : '[';

RULE_SQBC : ']';

RULE_BO : '(';

RULE_BC : ')';

RULE_CUBO : '{';

RULE_CUBC : '}';

RULE_KOMMA : ',';

RULE_EQ : '=';

fragment RULE_DOT : '.';

fragment RULE_AND : '&';

RULE_PIPE : '|';

RULE_SPACE : ' ';

fragment RULE_SYMBOL : ('-'|'_'|'+'|'#'|'~');

RULE_END : EOF;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
