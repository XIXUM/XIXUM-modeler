/**
 * generated by Xtext 2.33.0
 */
package org.xixum.latex.texDsl.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xixum.latex.texDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xixum.latex.texDsl.TexDslPackage
 * @generated
 */
public class TexDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static TexDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TexDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = TexDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case TexDslPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TexDslPackage.ELEMENT:
      {
        Element element = (Element)theEObject;
        T result = caseElement(element);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TexDslPackage.COMMAND:
      {
        Command command = (Command)theEObject;
        T result = caseCommand(command);
        if (result == null) result = caseElement(command);
        if (result == null) result = caseArgumentContent(command);
        if (result == null) result = caseMathContent(command);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TexDslPackage.OPTIONAL_ARGUMENT:
      {
        OptionalArgument optionalArgument = (OptionalArgument)theEObject;
        T result = caseOptionalArgument(optionalArgument);
        if (result == null) result = caseTextContent(optionalArgument);
        if (result == null) result = caseElement(optionalArgument);
        if (result == null) result = caseArgumentContent(optionalArgument);
        if (result == null) result = caseMathContent(optionalArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TexDslPackage.MANDATORY_ARGUMENT:
      {
        MandatoryArgument mandatoryArgument = (MandatoryArgument)theEObject;
        T result = caseMandatoryArgument(mandatoryArgument);
        if (result == null) result = caseTextContent(mandatoryArgument);
        if (result == null) result = caseElement(mandatoryArgument);
        if (result == null) result = caseArgumentContent(mandatoryArgument);
        if (result == null) result = caseMathContent(mandatoryArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TexDslPackage.ARGUMENT_CONTENT:
      {
        ArgumentContent argumentContent = (ArgumentContent)theEObject;
        T result = caseArgumentContent(argumentContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TexDslPackage.TEXT_CONTAINER:
      {
        TextContainer textContainer = (TextContainer)theEObject;
        T result = caseTextContainer(textContainer);
        if (result == null) result = caseTextContent(textContainer);
        if (result == null) result = caseElement(textContainer);
        if (result == null) result = caseArgumentContent(textContainer);
        if (result == null) result = caseMathContent(textContainer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TexDslPackage.TEXT_CONTENT:
      {
        TextContent textContent = (TextContent)theEObject;
        T result = caseTextContent(textContent);
        if (result == null) result = caseElement(textContent);
        if (result == null) result = caseArgumentContent(textContent);
        if (result == null) result = caseMathContent(textContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TexDslPackage.IDENTIFIERS:
      {
        Identifiers identifiers = (Identifiers)theEObject;
        T result = caseIdentifiers(identifiers);
        if (result == null) result = caseTextContent(identifiers);
        if (result == null) result = caseElement(identifiers);
        if (result == null) result = caseArgumentContent(identifiers);
        if (result == null) result = caseMathContent(identifiers);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TexDslPackage.NUMBERS:
      {
        Numbers numbers = (Numbers)theEObject;
        T result = caseNumbers(numbers);
        if (result == null) result = caseTextContent(numbers);
        if (result == null) result = caseElement(numbers);
        if (result == null) result = caseArgumentContent(numbers);
        if (result == null) result = caseMathContent(numbers);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TexDslPackage.OPERATORS:
      {
        Operators operators = (Operators)theEObject;
        T result = caseOperators(operators);
        if (result == null) result = caseTextContent(operators);
        if (result == null) result = caseElement(operators);
        if (result == null) result = caseArgumentContent(operators);
        if (result == null) result = caseMathContent(operators);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TexDslPackage.MATH_EXPRESSION:
      {
        MathExpression mathExpression = (MathExpression)theEObject;
        T result = caseMathExpression(mathExpression);
        if (result == null) result = caseElement(mathExpression);
        if (result == null) result = caseArgumentContent(mathExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TexDslPackage.INLINE_MATH:
      {
        InlineMath inlineMath = (InlineMath)theEObject;
        T result = caseInlineMath(inlineMath);
        if (result == null) result = caseMathExpression(inlineMath);
        if (result == null) result = caseElement(inlineMath);
        if (result == null) result = caseArgumentContent(inlineMath);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TexDslPackage.DISPLAY_MATH:
      {
        DisplayMath displayMath = (DisplayMath)theEObject;
        T result = caseDisplayMath(displayMath);
        if (result == null) result = caseMathExpression(displayMath);
        if (result == null) result = caseElement(displayMath);
        if (result == null) result = caseArgumentContent(displayMath);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case TexDslPackage.MATH_CONTENT:
      {
        MathContent mathContent = (MathContent)theEObject;
        T result = caseMathContent(mathContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElement(Element object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommand(Command object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Optional Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Optional Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOptionalArgument(OptionalArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mandatory Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mandatory Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMandatoryArgument(MandatoryArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Argument Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Argument Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArgumentContent(ArgumentContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Text Container</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Text Container</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTextContainer(TextContainer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Text Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Text Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTextContent(TextContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Identifiers</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Identifiers</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIdentifiers(Identifiers object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Numbers</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Numbers</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumbers(Numbers object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operators</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operators</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperators(Operators object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Math Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Math Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMathExpression(MathExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inline Math</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inline Math</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInlineMath(InlineMath object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Display Math</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Display Math</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDisplayMath(DisplayMath object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Math Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Math Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMathContent(MathContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //TexDslSwitch
