/**
 * generated by Xtext 2.33.0
 */
package org.xixum.latex.texDsl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xixum.latex.texDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xixum.latex.texDsl.TexDslPackage
 * @generated
 */
public class TexDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static TexDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TexDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = TexDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TexDslSwitch<Adapter> modelSwitch =
    new TexDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseElement(Element object)
      {
        return createElementAdapter();
      }
      @Override
      public Adapter caseCommand(Command object)
      {
        return createCommandAdapter();
      }
      @Override
      public Adapter caseOptionalArgument(OptionalArgument object)
      {
        return createOptionalArgumentAdapter();
      }
      @Override
      public Adapter caseMandatoryArgument(MandatoryArgument object)
      {
        return createMandatoryArgumentAdapter();
      }
      @Override
      public Adapter caseArgumentContent(ArgumentContent object)
      {
        return createArgumentContentAdapter();
      }
      @Override
      public Adapter caseTextContainer(TextContainer object)
      {
        return createTextContainerAdapter();
      }
      @Override
      public Adapter caseTextContent(TextContent object)
      {
        return createTextContentAdapter();
      }
      @Override
      public Adapter caseIdentifiers(Identifiers object)
      {
        return createIdentifiersAdapter();
      }
      @Override
      public Adapter caseNumbers(Numbers object)
      {
        return createNumbersAdapter();
      }
      @Override
      public Adapter caseOperators(Operators object)
      {
        return createOperatorsAdapter();
      }
      @Override
      public Adapter caseMathExpression(MathExpression object)
      {
        return createMathExpressionAdapter();
      }
      @Override
      public Adapter caseInlineMath(InlineMath object)
      {
        return createInlineMathAdapter();
      }
      @Override
      public Adapter caseDisplayMath(DisplayMath object)
      {
        return createDisplayMathAdapter();
      }
      @Override
      public Adapter caseMathContent(MathContent object)
      {
        return createMathContentAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xixum.latex.texDsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xixum.latex.texDsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xixum.latex.texDsl.Element <em>Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xixum.latex.texDsl.Element
   * @generated
   */
  public Adapter createElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xixum.latex.texDsl.Command <em>Command</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xixum.latex.texDsl.Command
   * @generated
   */
  public Adapter createCommandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xixum.latex.texDsl.OptionalArgument <em>Optional Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xixum.latex.texDsl.OptionalArgument
   * @generated
   */
  public Adapter createOptionalArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xixum.latex.texDsl.MandatoryArgument <em>Mandatory Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xixum.latex.texDsl.MandatoryArgument
   * @generated
   */
  public Adapter createMandatoryArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xixum.latex.texDsl.ArgumentContent <em>Argument Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xixum.latex.texDsl.ArgumentContent
   * @generated
   */
  public Adapter createArgumentContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xixum.latex.texDsl.TextContainer <em>Text Container</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xixum.latex.texDsl.TextContainer
   * @generated
   */
  public Adapter createTextContainerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xixum.latex.texDsl.TextContent <em>Text Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xixum.latex.texDsl.TextContent
   * @generated
   */
  public Adapter createTextContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xixum.latex.texDsl.Identifiers <em>Identifiers</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xixum.latex.texDsl.Identifiers
   * @generated
   */
  public Adapter createIdentifiersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xixum.latex.texDsl.Numbers <em>Numbers</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xixum.latex.texDsl.Numbers
   * @generated
   */
  public Adapter createNumbersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xixum.latex.texDsl.Operators <em>Operators</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xixum.latex.texDsl.Operators
   * @generated
   */
  public Adapter createOperatorsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xixum.latex.texDsl.MathExpression <em>Math Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xixum.latex.texDsl.MathExpression
   * @generated
   */
  public Adapter createMathExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xixum.latex.texDsl.InlineMath <em>Inline Math</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xixum.latex.texDsl.InlineMath
   * @generated
   */
  public Adapter createInlineMathAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xixum.latex.texDsl.DisplayMath <em>Display Math</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xixum.latex.texDsl.DisplayMath
   * @generated
   */
  public Adapter createDisplayMathAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xixum.latex.texDsl.MathContent <em>Math Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xixum.latex.texDsl.MathContent
   * @generated
   */
  public Adapter createMathContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //TexDslAdapterFactory
