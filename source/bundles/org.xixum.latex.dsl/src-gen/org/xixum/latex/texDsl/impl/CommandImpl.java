/**
 * generated by Xtext 2.33.0
 */
package org.xixum.latex.texDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xixum.latex.texDsl.Command;
import org.xixum.latex.texDsl.MandatoryArgument;
import org.xixum.latex.texDsl.OptionalArgument;
import org.xixum.latex.texDsl.TexDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Command</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xixum.latex.texDsl.impl.CommandImpl#getCommand <em>Command</em>}</li>
 *   <li>{@link org.xixum.latex.texDsl.impl.CommandImpl#getOptionalArgs <em>Optional Args</em>}</li>
 *   <li>{@link org.xixum.latex.texDsl.impl.CommandImpl#getMandatoryArgs <em>Mandatory Args</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CommandImpl extends ElementImpl implements Command
{
  /**
   * The default value of the '{@link #getCommand() <em>Command</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommand()
   * @generated
   * @ordered
   */
  protected static final String COMMAND_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCommand() <em>Command</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommand()
   * @generated
   * @ordered
   */
  protected String command = COMMAND_EDEFAULT;

  /**
   * The cached value of the '{@link #getOptionalArgs() <em>Optional Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOptionalArgs()
   * @generated
   * @ordered
   */
  protected EList<OptionalArgument> optionalArgs;

  /**
   * The cached value of the '{@link #getMandatoryArgs() <em>Mandatory Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMandatoryArgs()
   * @generated
   * @ordered
   */
  protected EList<MandatoryArgument> mandatoryArgs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CommandImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TexDslPackage.Literals.COMMAND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCommand()
  {
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCommand(String newCommand)
  {
    String oldCommand = command;
    command = newCommand;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TexDslPackage.COMMAND__COMMAND, oldCommand, command));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<OptionalArgument> getOptionalArgs()
  {
    if (optionalArgs == null)
    {
      optionalArgs = new EObjectContainmentEList<OptionalArgument>(OptionalArgument.class, this, TexDslPackage.COMMAND__OPTIONAL_ARGS);
    }
    return optionalArgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MandatoryArgument> getMandatoryArgs()
  {
    if (mandatoryArgs == null)
    {
      mandatoryArgs = new EObjectContainmentEList<MandatoryArgument>(MandatoryArgument.class, this, TexDslPackage.COMMAND__MANDATORY_ARGS);
    }
    return mandatoryArgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TexDslPackage.COMMAND__OPTIONAL_ARGS:
        return ((InternalEList<?>)getOptionalArgs()).basicRemove(otherEnd, msgs);
      case TexDslPackage.COMMAND__MANDATORY_ARGS:
        return ((InternalEList<?>)getMandatoryArgs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TexDslPackage.COMMAND__COMMAND:
        return getCommand();
      case TexDslPackage.COMMAND__OPTIONAL_ARGS:
        return getOptionalArgs();
      case TexDslPackage.COMMAND__MANDATORY_ARGS:
        return getMandatoryArgs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TexDslPackage.COMMAND__COMMAND:
        setCommand((String)newValue);
        return;
      case TexDslPackage.COMMAND__OPTIONAL_ARGS:
        getOptionalArgs().clear();
        getOptionalArgs().addAll((Collection<? extends OptionalArgument>)newValue);
        return;
      case TexDslPackage.COMMAND__MANDATORY_ARGS:
        getMandatoryArgs().clear();
        getMandatoryArgs().addAll((Collection<? extends MandatoryArgument>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TexDslPackage.COMMAND__COMMAND:
        setCommand(COMMAND_EDEFAULT);
        return;
      case TexDslPackage.COMMAND__OPTIONAL_ARGS:
        getOptionalArgs().clear();
        return;
      case TexDslPackage.COMMAND__MANDATORY_ARGS:
        getMandatoryArgs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TexDslPackage.COMMAND__COMMAND:
        return COMMAND_EDEFAULT == null ? command != null : !COMMAND_EDEFAULT.equals(command);
      case TexDslPackage.COMMAND__OPTIONAL_ARGS:
        return optionalArgs != null && !optionalArgs.isEmpty();
      case TexDslPackage.COMMAND__MANDATORY_ARGS:
        return mandatoryArgs != null && !mandatoryArgs.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (command: ");
    result.append(command);
    result.append(')');
    return result.toString();
  }

} //CommandImpl
