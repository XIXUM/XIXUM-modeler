/*
 * generated by Xtext 2.33.0
 */
package org.xixum.latex.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xixum.latex.services.TexDslGrammarAccess;

@SuppressWarnings("all")
public class TexDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected TexDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_MathContent_NUMBERTerminalRuleCall_2_1_or_SYMBOLTerminalRuleCall_3_1_or_TEXTTerminalRuleCall_1_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (TexDslGrammarAccess) access;
		match_MathContent_NUMBERTerminalRuleCall_2_1_or_SYMBOLTerminalRuleCall_3_1_or_TEXTTerminalRuleCall_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMathContentAccess().getNUMBERTerminalRuleCall_2_1()), new TokenAlias(false, false, grammarAccess.getMathContentAccess().getSYMBOLTerminalRuleCall_3_1()), new TokenAlias(false, false, grammarAccess.getMathContentAccess().getTEXTTerminalRuleCall_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getNUMBERRule())
			return getNUMBERToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSYMBOLRule())
			return getSYMBOLToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTEXTRule())
			return getTEXTToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal NUMBER returns ecore::EBigDecimal:
	 *     INT ('.' INT)?;
	 */
	protected String getNUMBERToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal SYMBOL:
	 *     ('+'|'-'|'='|'/'|'*'|'^'|'_'|'<'|'>'|'&'|'%'|'#');
	 */
	protected String getSYMBOLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	/**
	 * terminal TEXT:
	 *     !('\\' | '$' | '{' | '}' | '[' | ']' | '^' | '_' | ' '|'\t'|'\r'|'\n')+;
	 */
	protected String getTEXTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_MathContent_NUMBERTerminalRuleCall_2_1_or_SYMBOLTerminalRuleCall_3_1_or_TEXTTerminalRuleCall_1_1.equals(syntax))
				emit_MathContent_NUMBERTerminalRuleCall_2_1_or_SYMBOLTerminalRuleCall_3_1_or_TEXTTerminalRuleCall_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     TEXT | NUMBER | SYMBOL
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_MathContent_NUMBERTerminalRuleCall_2_1_or_SYMBOLTerminalRuleCall_3_1_or_TEXTTerminalRuleCall_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
