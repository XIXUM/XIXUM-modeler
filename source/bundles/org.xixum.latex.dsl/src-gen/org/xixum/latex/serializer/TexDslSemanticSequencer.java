/*
 * generated by Xtext 2.33.0
 */
package org.xixum.latex.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xixum.latex.services.TexDslGrammarAccess;
import org.xixum.latex.texDsl.Codeblock;
import org.xixum.latex.texDsl.CodeblockContent;
import org.xixum.latex.texDsl.CodeblockElement;
import org.xixum.latex.texDsl.Command;
import org.xixum.latex.texDsl.DisplayMath;
import org.xixum.latex.texDsl.Identifiers;
import org.xixum.latex.texDsl.InlineMath;
import org.xixum.latex.texDsl.MandatoryArgument;
import org.xixum.latex.texDsl.Model;
import org.xixum.latex.texDsl.Numbers;
import org.xixum.latex.texDsl.Operators;
import org.xixum.latex.texDsl.OptionalArgument;
import org.xixum.latex.texDsl.TexDslPackage;
import org.xixum.latex.texDsl.TextContainer;

@SuppressWarnings("all")
public class TexDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TexDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TexDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TexDslPackage.CODEBLOCK:
				sequence_Codeblock(context, (Codeblock) semanticObject); 
				return; 
			case TexDslPackage.CODEBLOCK_CONTENT:
				sequence_CodeblockContent(context, (CodeblockContent) semanticObject); 
				return; 
			case TexDslPackage.CODEBLOCK_ELEMENT:
				sequence_CodeblockElement(context, (CodeblockElement) semanticObject); 
				return; 
			case TexDslPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case TexDslPackage.DISPLAY_MATH:
				sequence_DisplayMath(context, (DisplayMath) semanticObject); 
				return; 
			case TexDslPackage.IDENTIFIERS:
				sequence_Identifiers(context, (Identifiers) semanticObject); 
				return; 
			case TexDslPackage.INLINE_MATH:
				sequence_InlineMath(context, (InlineMath) semanticObject); 
				return; 
			case TexDslPackage.MANDATORY_ARGUMENT:
				sequence_MandatoryArgument(context, (MandatoryArgument) semanticObject); 
				return; 
			case TexDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case TexDslPackage.NUMBERS:
				sequence_Numbers(context, (Numbers) semanticObject); 
				return; 
			case TexDslPackage.OPERATORS:
				sequence_Operators(context, (Operators) semanticObject); 
				return; 
			case TexDslPackage.OPTIONAL_ARGUMENT:
				sequence_OptionalArgument(context, (OptionalArgument) semanticObject); 
				return; 
			case TexDslPackage.TEXT_CONTAINER:
				sequence_TextContainer(context, (TextContainer) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     CodeblockContent returns CodeblockContent
	 *
	 * Constraint:
	 *     elements+=CodeblockElement*
	 * </pre>
	 */
	protected void sequence_CodeblockContent(ISerializationContext context, CodeblockContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CodeblockElement returns CodeblockElement
	 *
	 * Constraint:
	 *     {CodeblockElement}
	 * </pre>
	 */
	protected void sequence_CodeblockElement(ISerializationContext context, CodeblockElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Codeblock
	 *     Codeblock returns Codeblock
	 *
	 * Constraint:
	 *     content=CodeblockContent
	 * </pre>
	 */
	protected void sequence_Codeblock(ISerializationContext context, Codeblock semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TexDslPackage.Literals.CODEBLOCK__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TexDslPackage.Literals.CODEBLOCK__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodeblockAccess().getContentCodeblockContentParserRuleCall_2_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Command
	 *     Command returns Command
	 *     CodeblockElement returns Command
	 *     ArgumentContent returns Command
	 *     MathContent returns Command
	 *
	 * Constraint:
	 *     (command=ID optionalArgs+=OptionalArgument* mandatoryArgs+=MandatoryArgument*)
	 * </pre>
	 */
	protected void sequence_Command(ISerializationContext context, Command semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns DisplayMath
	 *     ArgumentContent returns DisplayMath
	 *     MathExpression returns DisplayMath
	 *     DisplayMath returns DisplayMath
	 *
	 * Constraint:
	 *     content+=MathContent*
	 * </pre>
	 */
	protected void sequence_DisplayMath(ISerializationContext context, DisplayMath semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Identifiers
	 *     ArgumentContent returns Identifiers
	 *     TextContent returns Identifiers
	 *     Identifiers returns Identifiers
	 *     MathContent returns Identifiers
	 *
	 * Constraint:
	 *     id=ID
	 * </pre>
	 */
	protected void sequence_Identifiers(ISerializationContext context, Identifiers semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TexDslPackage.Literals.IDENTIFIERS__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TexDslPackage.Literals.IDENTIFIERS__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIdentifiersAccess().getIdIDTerminalRuleCall_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns InlineMath
	 *     ArgumentContent returns InlineMath
	 *     MathExpression returns InlineMath
	 *     InlineMath returns InlineMath
	 *
	 * Constraint:
	 *     content+=MathContent*
	 * </pre>
	 */
	protected void sequence_InlineMath(ISerializationContext context, InlineMath semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns MandatoryArgument
	 *     MandatoryArgument returns MandatoryArgument
	 *     ArgumentContent returns MandatoryArgument
	 *     TextContent returns MandatoryArgument
	 *     MathContent returns MandatoryArgument
	 *
	 * Constraint:
	 *     content+=ArgumentContent*
	 * </pre>
	 */
	protected void sequence_MandatoryArgument(ISerializationContext context, MandatoryArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     elements+=Element+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Numbers
	 *     ArgumentContent returns Numbers
	 *     TextContent returns Numbers
	 *     Numbers returns Numbers
	 *     MathContent returns Numbers
	 *
	 * Constraint:
	 *     num=NUMBER
	 * </pre>
	 */
	protected void sequence_Numbers(ISerializationContext context, Numbers semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TexDslPackage.Literals.NUMBERS__NUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TexDslPackage.Literals.NUMBERS__NUM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumbersAccess().getNumNUMBERTerminalRuleCall_0(), semanticObject.getNum());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Operators
	 *     ArgumentContent returns Operators
	 *     TextContent returns Operators
	 *     Operators returns Operators
	 *     MathContent returns Operators
	 *
	 * Constraint:
	 *     op+=SYMBOL+
	 * </pre>
	 */
	protected void sequence_Operators(ISerializationContext context, Operators semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns OptionalArgument
	 *     OptionalArgument returns OptionalArgument
	 *     ArgumentContent returns OptionalArgument
	 *     TextContent returns OptionalArgument
	 *     MathContent returns OptionalArgument
	 *
	 * Constraint:
	 *     content+=ArgumentContent*
	 * </pre>
	 */
	protected void sequence_OptionalArgument(ISerializationContext context, OptionalArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns TextContainer
	 *     ArgumentContent returns TextContainer
	 *     TextContainer returns TextContainer
	 *     TextContent returns TextContainer
	 *     MathContent returns TextContainer
	 *
	 * Constraint:
	 *     text+=TEXT+
	 * </pre>
	 */
	protected void sequence_TextContainer(ISerializationContext context, TextContainer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
