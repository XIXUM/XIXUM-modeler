/*
 * generated by Xtext 2.33.0
 */
package org.xixum.latex.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xixum.latex.services.TexDslGrammarAccess;
import org.xixum.latex.texDsl.Command;
import org.xixum.latex.texDsl.DisplayMath;
import org.xixum.latex.texDsl.Environment;
import org.xixum.latex.texDsl.InlineMath;
import org.xixum.latex.texDsl.MandatoryArgument;
import org.xixum.latex.texDsl.MathContent;
import org.xixum.latex.texDsl.Model;
import org.xixum.latex.texDsl.OptionalArgument;
import org.xixum.latex.texDsl.TexDslPackage;
import org.xixum.latex.texDsl.TextContent;

@SuppressWarnings("all")
public class TexDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TexDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TexDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TexDslPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case TexDslPackage.DISPLAY_MATH:
				sequence_DisplayMath(context, (DisplayMath) semanticObject); 
				return; 
			case TexDslPackage.ENVIRONMENT:
				sequence_Environment(context, (Environment) semanticObject); 
				return; 
			case TexDslPackage.INLINE_MATH:
				sequence_InlineMath(context, (InlineMath) semanticObject); 
				return; 
			case TexDslPackage.MANDATORY_ARGUMENT:
				sequence_MandatoryArgument(context, (MandatoryArgument) semanticObject); 
				return; 
			case TexDslPackage.MATH_CONTENT:
				sequence_MathContent(context, (MathContent) semanticObject); 
				return; 
			case TexDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case TexDslPackage.OPTIONAL_ARGUMENT:
				sequence_OptionalArgument(context, (OptionalArgument) semanticObject); 
				return; 
			case TexDslPackage.TEXT_CONTENT:
				sequence_TextContent(context, (TextContent) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Command
	 *     Command returns Command
	 *     ArgumentContent returns Command
	 *     MathContent returns Command
	 *
	 * Constraint:
	 *     (name=ID optionalArgs+=OptionalArgument* mandatoryArgs+=MandatoryArgument*)
	 * </pre>
	 */
	protected void sequence_Command(ISerializationContext context, Command semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns DisplayMath
	 *     ArgumentContent returns DisplayMath
	 *     MathExpression returns DisplayMath
	 *     DisplayMath returns DisplayMath
	 *
	 * Constraint:
	 *     content+=MathContent*
	 * </pre>
	 */
	protected void sequence_DisplayMath(ISerializationContext context, DisplayMath semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Environment
	 *     Environment returns Environment
	 *     ArgumentContent returns Environment
	 *
	 * Constraint:
	 *     (type=ID content+=Element* endType=ID)
	 * </pre>
	 */
	protected void sequence_Environment(ISerializationContext context, Environment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns InlineMath
	 *     ArgumentContent returns InlineMath
	 *     MathExpression returns InlineMath
	 *     InlineMath returns InlineMath
	 *
	 * Constraint:
	 *     content+=MathContent*
	 * </pre>
	 */
	protected void sequence_InlineMath(ISerializationContext context, InlineMath semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MandatoryArgument returns MandatoryArgument
	 *
	 * Constraint:
	 *     content+=ArgumentContent+
	 * </pre>
	 */
	protected void sequence_MandatoryArgument(ISerializationContext context, MandatoryArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MathContent returns MathContent
	 *
	 * Constraint:
	 *     {MathContent}
	 * </pre>
	 */
	protected void sequence_MathContent(ISerializationContext context, MathContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     elements+=Element+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     OptionalArgument returns OptionalArgument
	 *
	 * Constraint:
	 *     content+=ArgumentContent+
	 * </pre>
	 */
	protected void sequence_OptionalArgument(ISerializationContext context, OptionalArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns TextContent
	 *     ArgumentContent returns TextContent
	 *     TextContent returns TextContent
	 *
	 * Constraint:
	 *     text+=TEXT*
	 * </pre>
	 */
	protected void sequence_TextContent(ISerializationContext context, TextContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
