/*
 * generated by Xtext 2.33.0
 */
package org.xixum.latex.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xixum.latex.services.TexDslGrammarAccess;
import org.xixum.latex.texDsl.Attributes;
import org.xixum.latex.texDsl.Command;
import org.xixum.latex.texDsl.CommandExt;
import org.xixum.latex.texDsl.Document;
import org.xixum.latex.texDsl.Extras;
import org.xixum.latex.texDsl.Model;
import org.xixum.latex.texDsl.Multi;
import org.xixum.latex.texDsl.TexDslPackage;
import org.xixum.latex.texDsl.Text;

@SuppressWarnings("all")
public class TexDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TexDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TexDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TexDslPackage.ATTRIBUTES:
				sequence_Attributes(context, (Attributes) semanticObject); 
				return; 
			case TexDslPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case TexDslPackage.COMMAND_EXT:
				sequence_CommandExt(context, (CommandExt) semanticObject); 
				return; 
			case TexDslPackage.DOCUMENT:
				sequence_Document(context, (Document) semanticObject); 
				return; 
			case TexDslPackage.EXTRAS:
				sequence_Extras(context, (Extras) semanticObject); 
				return; 
			case TexDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case TexDslPackage.MULTI:
				sequence_Multi(context, (Multi) semanticObject); 
				return; 
			case TexDslPackage.TEXT:
				sequence_Text(context, (Text) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attributes returns Attributes
	 *
	 * Constraint:
	 *     (key=ID (multi+=Multi+ | single=ID)?)
	 * </pre>
	 */
	protected void sequence_Attributes(ISerializationContext context, Attributes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CommandExt returns CommandExt
	 *     Compound returns CommandExt
	 *
	 * Constraint:
	 *     ((command=ID | command=ID_COMM) tokens+=Compound tokens+=Compound*)
	 * </pre>
	 */
	protected void sequence_CommandExt(ISerializationContext context, CommandExt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Document returns Command
	 *     Command returns Command
	 *
	 * Constraint:
	 *     (command=ID_COMM (attrs+=Attributes attrs+=Attributes*)? (tokens+=Compound tokens+=Compound*)?)
	 * </pre>
	 */
	protected void sequence_Command(ISerializationContext context, Command semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Document returns Document
	 *
	 * Constraint:
	 *     {Document}
	 * </pre>
	 */
	protected void sequence_Document(ISerializationContext context, Document semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Compound returns Extras
	 *     Extras returns Extras
	 *
	 * Constraint:
	 *     (tokens+=BO | tokens+=BC)+
	 * </pre>
	 */
	protected void sequence_Extras(ISerializationContext context, Extras semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     document+=Document+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Multi returns Multi
	 *     Compound returns Multi
	 *
	 * Constraint:
	 *     tokens+=ID+
	 * </pre>
	 */
	protected void sequence_Multi(ISerializationContext context, Multi semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Document returns Text
	 *     Text returns Text
	 *
	 * Constraint:
	 *     token+=AnyText
	 * </pre>
	 */
	protected void sequence_Text(ISerializationContext context, Text semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
