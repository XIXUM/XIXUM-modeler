/*
 * generated by Xtext 2.33.0
 */
package org.xixum.latex.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TexDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//    elements+=Element*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Element*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_0() { return cElementsElementParserRuleCall_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTextContentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMathExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCodeblockParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Element:
		//    Command | TextContent | MathExpression | Codeblock;
		@Override public ParserRule getRule() { return rule; }
		
		//Command | TextContent | MathExpression | Codeblock
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Command
		public RuleCall getCommandParserRuleCall_0() { return cCommandParserRuleCall_0; }
		
		//TextContent
		public RuleCall getTextContentParserRuleCall_1() { return cTextContentParserRuleCall_1; }
		
		//MathExpression
		public RuleCall getMathExpressionParserRuleCall_2() { return cMathExpressionParserRuleCall_2; }
		
		//Codeblock
		public RuleCall getCodeblockParserRuleCall_3() { return cCodeblockParserRuleCall_3; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cCommandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommandIDTerminalRuleCall_1_0 = (RuleCall)cCommandAssignment_1.eContents().get(0);
		private final Assignment cOptionalArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOptionalArgsOptionalArgumentParserRuleCall_2_0 = (RuleCall)cOptionalArgsAssignment_2.eContents().get(0);
		private final Assignment cMandatoryArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMandatoryArgsMandatoryArgumentParserRuleCall_3_0 = (RuleCall)cMandatoryArgsAssignment_3.eContents().get(0);
		
		//Command:
		//    ->BS command=ID
		//    optionalArgs+=OptionalArgument*
		//    mandatoryArgs+=MandatoryArgument*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//->BS command=ID
		//optionalArgs+=OptionalArgument*
		//mandatoryArgs+=MandatoryArgument*
		public Group getGroup() { return cGroup; }
		
		//->BS
		public RuleCall getBSTerminalRuleCall_0() { return cBSTerminalRuleCall_0; }
		
		//command=ID
		public Assignment getCommandAssignment_1() { return cCommandAssignment_1; }
		
		//ID
		public RuleCall getCommandIDTerminalRuleCall_1_0() { return cCommandIDTerminalRuleCall_1_0; }
		
		//optionalArgs+=OptionalArgument*
		public Assignment getOptionalArgsAssignment_2() { return cOptionalArgsAssignment_2; }
		
		//OptionalArgument
		public RuleCall getOptionalArgsOptionalArgumentParserRuleCall_2_0() { return cOptionalArgsOptionalArgumentParserRuleCall_2_0; }
		
		//mandatoryArgs+=MandatoryArgument*
		public Assignment getMandatoryArgsAssignment_3() { return cMandatoryArgsAssignment_3; }
		
		//MandatoryArgument
		public RuleCall getMandatoryArgsMandatoryArgumentParserRuleCall_3_0() { return cMandatoryArgsMandatoryArgumentParserRuleCall_3_0; }
	}
	public class OptionalArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.OptionalArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOptionalArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSQBOTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentArgumentContentParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final RuleCall cSQBCTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//OptionalArgument:
		//    {OptionalArgument} SQBO content+=ArgumentContent* SQBC;
		@Override public ParserRule getRule() { return rule; }
		
		//{OptionalArgument} SQBO content+=ArgumentContent* SQBC
		public Group getGroup() { return cGroup; }
		
		//{OptionalArgument}
		public Action getOptionalArgumentAction_0() { return cOptionalArgumentAction_0; }
		
		//SQBO
		public RuleCall getSQBOTerminalRuleCall_1() { return cSQBOTerminalRuleCall_1; }
		
		//content+=ArgumentContent*
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//ArgumentContent
		public RuleCall getContentArgumentContentParserRuleCall_2_0() { return cContentArgumentContentParserRuleCall_2_0; }
		
		//SQBC
		public RuleCall getSQBCTerminalRuleCall_3() { return cSQBCTerminalRuleCall_3; }
	}
	public class MandatoryArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.MandatoryArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMandatoryArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cCUBOTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentArgumentContentParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final RuleCall cCUBCTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//MandatoryArgument:
		//    {MandatoryArgument} CUBO content+=ArgumentContent* CUBC;
		@Override public ParserRule getRule() { return rule; }
		
		//{MandatoryArgument} CUBO content+=ArgumentContent* CUBC
		public Group getGroup() { return cGroup; }
		
		//{MandatoryArgument}
		public Action getMandatoryArgumentAction_0() { return cMandatoryArgumentAction_0; }
		
		//CUBO
		public RuleCall getCUBOTerminalRuleCall_1() { return cCUBOTerminalRuleCall_1; }
		
		//content+=ArgumentContent*
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//ArgumentContent
		public RuleCall getContentArgumentContentParserRuleCall_2_0() { return cContentArgumentContentParserRuleCall_2_0; }
		
		//CUBC
		public RuleCall getCUBCTerminalRuleCall_3() { return cCUBCTerminalRuleCall_3; }
	}
	public class CodeblockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Codeblock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cBeginCodeblockKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentCodeblockContentParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final RuleCall cBSTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cEndCodeblockKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Codeblock:
		//    BS ->'begin{codeblock}'
		//    content=CodeblockContent
		//    BS ->'end{codeblock}';
		@Override public ParserRule getRule() { return rule; }
		
		//BS ->'begin{codeblock}'
		//content=CodeblockContent
		//BS ->'end{codeblock}'
		public Group getGroup() { return cGroup; }
		
		//BS
		public RuleCall getBSTerminalRuleCall_0() { return cBSTerminalRuleCall_0; }
		
		//->'begin{codeblock}'
		public Keyword getBeginCodeblockKeyword_1() { return cBeginCodeblockKeyword_1; }
		
		//content=CodeblockContent
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//CodeblockContent
		public RuleCall getContentCodeblockContentParserRuleCall_2_0() { return cContentCodeblockContentParserRuleCall_2_0; }
		
		//BS
		public RuleCall getBSTerminalRuleCall_3() { return cBSTerminalRuleCall_3; }
		
		//->'end{codeblock}'
		public Keyword getEndCodeblockKeyword_4() { return cEndCodeblockKeyword_4; }
	}
	public class CodeblockContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.CodeblockContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCodeblockContentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsCodeblockElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//CodeblockContent:
		//    {CodeblockContent} (elements+=CodeblockElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{CodeblockContent} (elements+=CodeblockElement)*
		public Group getGroup() { return cGroup; }
		
		//{CodeblockContent}
		public Action getCodeblockContentAction_0() { return cCodeblockContentAction_0; }
		
		//(elements+=CodeblockElement)*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//CodeblockElement
		public RuleCall getElementsCodeblockElementParserRuleCall_1_0() { return cElementsCodeblockElementParserRuleCall_1_0; }
	}
	public class CodeblockElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.CodeblockElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCodeblockElementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cAnyTokenParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CodeblockElement:
		//    {CodeblockElement} AnyToken | Command;
		@Override public ParserRule getRule() { return rule; }
		
		//{CodeblockElement} AnyToken | Command
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{CodeblockElement} AnyToken
		public Group getGroup_0() { return cGroup_0; }
		
		//{CodeblockElement}
		public Action getCodeblockElementAction_0_0() { return cCodeblockElementAction_0_0; }
		
		//AnyToken
		public RuleCall getAnyTokenParserRuleCall_0_1() { return cAnyTokenParserRuleCall_0_1; }
		
		//Command
		public RuleCall getCommandParserRuleCall_1() { return cCommandParserRuleCall_1; }
	}
	public class AnyTokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.AnyToken");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTEXTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSYMBOLTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSQBOTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSQBCTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCUBOTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCUBCTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBSTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//AnyToken:
		//    ID | TEXT | SYMBOL | NUMBER | SQBO | SQBC | CUBO | CUBC | BS+;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | TEXT | SYMBOL | NUMBER | SQBO | SQBC | CUBO | CUBC | BS+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//TEXT
		public RuleCall getTEXTTerminalRuleCall_1() { return cTEXTTerminalRuleCall_1; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_2() { return cSYMBOLTerminalRuleCall_2; }
		
		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_3() { return cNUMBERTerminalRuleCall_3; }
		
		//SQBO
		public RuleCall getSQBOTerminalRuleCall_4() { return cSQBOTerminalRuleCall_4; }
		
		//SQBC
		public RuleCall getSQBCTerminalRuleCall_5() { return cSQBCTerminalRuleCall_5; }
		
		//CUBO
		public RuleCall getCUBOTerminalRuleCall_6() { return cCUBOTerminalRuleCall_6; }
		
		//CUBC
		public RuleCall getCUBCTerminalRuleCall_7() { return cCUBCTerminalRuleCall_7; }
		
		//BS+
		public RuleCall getBSTerminalRuleCall_8() { return cBSTerminalRuleCall_8; }
	}
	public class ArgumentContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.ArgumentContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextContentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMathExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ArgumentContent:
		//    TextContent | Command | MathExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//TextContent | Command | MathExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TextContent
		public RuleCall getTextContentParserRuleCall_0() { return cTextContentParserRuleCall_0; }
		
		//Command
		public RuleCall getCommandParserRuleCall_1() { return cCommandParserRuleCall_1; }
		
		//MathExpression
		public RuleCall getMathExpressionParserRuleCall_2() { return cMathExpressionParserRuleCall_2; }
	}
	public class TextContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.TextContainer");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTextTEXTTerminalRuleCall_0 = (RuleCall)cTextAssignment.eContents().get(0);
		
		//TextContainer:
		//    text+=TEXT+;
		@Override public ParserRule getRule() { return rule; }
		
		//text+=TEXT+
		public Assignment getTextAssignment() { return cTextAssignment; }
		
		//TEXT
		public RuleCall getTextTEXTTerminalRuleCall_0() { return cTextTEXTTerminalRuleCall_0; }
	}
	public class TextContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.TextContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifiersParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTextContainerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOperatorsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumbersParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOptionalArgumentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMandatoryArgumentParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//TextContent:
		//    Identifiers | TextContainer | Operators | Numbers | OptionalArgument | MandatoryArgument
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Identifiers | TextContainer | Operators | Numbers | OptionalArgument | MandatoryArgument
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Identifiers
		public RuleCall getIdentifiersParserRuleCall_0() { return cIdentifiersParserRuleCall_0; }
		
		//TextContainer
		public RuleCall getTextContainerParserRuleCall_1() { return cTextContainerParserRuleCall_1; }
		
		//Operators
		public RuleCall getOperatorsParserRuleCall_2() { return cOperatorsParserRuleCall_2; }
		
		//Numbers
		public RuleCall getNumbersParserRuleCall_3() { return cNumbersParserRuleCall_3; }
		
		//OptionalArgument
		public RuleCall getOptionalArgumentParserRuleCall_4() { return cOptionalArgumentParserRuleCall_4; }
		
		//MandatoryArgument
		public RuleCall getMandatoryArgumentParserRuleCall_5() { return cMandatoryArgumentParserRuleCall_5; }
	}
	public class IdentifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Identifiers");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//Identifiers:
		//    id=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}
	public class NumbersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Numbers");
		private final Assignment cNumAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumNUMBERTerminalRuleCall_0 = (RuleCall)cNumAssignment.eContents().get(0);
		
		//Numbers:
		//    num=NUMBER
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//num=NUMBER
		public Assignment getNumAssignment() { return cNumAssignment; }
		
		//NUMBER
		public RuleCall getNumNUMBERTerminalRuleCall_0() { return cNumNUMBERTerminalRuleCall_0; }
	}
	public class OperatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Operators");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOpSYMBOLTerminalRuleCall_0 = (RuleCall)cOpAssignment.eContents().get(0);
		
		//Operators:
		//    op+=SYMBOL+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//op+=SYMBOL+
		public Assignment getOpAssignment() { return cOpAssignment; }
		
		//SYMBOL
		public RuleCall getOpSYMBOLTerminalRuleCall_0() { return cOpSYMBOLTerminalRuleCall_0; }
	}
	public class MathExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.MathExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInlineMathParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDisplayMathParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MathExpression:
		//    InlineMath | DisplayMath;
		@Override public ParserRule getRule() { return rule; }
		
		//InlineMath | DisplayMath
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InlineMath
		public RuleCall getInlineMathParserRuleCall_0() { return cInlineMathParserRuleCall_0; }
		
		//DisplayMath
		public RuleCall getDisplayMathParserRuleCall_1() { return cDisplayMathParserRuleCall_1; }
	}
	public class InlineMathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.InlineMath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInlineMathAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDollarSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentMathContentParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cDollarSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InlineMath:
		//    {InlineMath} '$' content+=MathContent* '$';
		@Override public ParserRule getRule() { return rule; }
		
		//{InlineMath} '$' content+=MathContent* '$'
		public Group getGroup() { return cGroup; }
		
		//{InlineMath}
		public Action getInlineMathAction_0() { return cInlineMathAction_0; }
		
		//'$'
		public Keyword getDollarSignKeyword_1() { return cDollarSignKeyword_1; }
		
		//content+=MathContent*
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//MathContent
		public RuleCall getContentMathContentParserRuleCall_2_0() { return cContentMathContentParserRuleCall_2_0; }
		
		//'$'
		public Keyword getDollarSignKeyword_3() { return cDollarSignKeyword_3; }
	}
	public class DisplayMathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.DisplayMath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDisplayMathAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDollarSignDollarSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentMathContentParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cDollarSignDollarSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DisplayMath:
		//    {DisplayMath} '$$' content+=MathContent* '$$';
		@Override public ParserRule getRule() { return rule; }
		
		//{DisplayMath} '$$' content+=MathContent* '$$'
		public Group getGroup() { return cGroup; }
		
		//{DisplayMath}
		public Action getDisplayMathAction_0() { return cDisplayMathAction_0; }
		
		//'$$'
		public Keyword getDollarSignDollarSignKeyword_1() { return cDollarSignDollarSignKeyword_1; }
		
		//content+=MathContent*
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//MathContent
		public RuleCall getContentMathContentParserRuleCall_2_0() { return cContentMathContentParserRuleCall_2_0; }
		
		//'$$'
		public Keyword getDollarSignDollarSignKeyword_3() { return cDollarSignDollarSignKeyword_3; }
	}
	public class MathContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.MathContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTextContentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumbersParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOperatorsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//MathContent:
		//    Command | TextContent | Numbers | Operators;
		@Override public ParserRule getRule() { return rule; }
		
		//Command | TextContent | Numbers | Operators
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Command
		public RuleCall getCommandParserRuleCall_0() { return cCommandParserRuleCall_0; }
		
		//TextContent
		public RuleCall getTextContentParserRuleCall_1() { return cTextContentParserRuleCall_1; }
		
		//Numbers
		public RuleCall getNumbersParserRuleCall_2() { return cNumbersParserRuleCall_2; }
		
		//Operators
		public RuleCall getOperatorsParserRuleCall_3() { return cOperatorsParserRuleCall_3; }
	}
	
	
	private final ModelElements pModel;
	private final ElementElements pElement;
	private final CommandElements pCommand;
	private final OptionalArgumentElements pOptionalArgument;
	private final MandatoryArgumentElements pMandatoryArgument;
	private final CodeblockElements pCodeblock;
	private final CodeblockContentElements pCodeblockContent;
	private final CodeblockElementElements pCodeblockElement;
	private final AnyTokenElements pAnyToken;
	private final ArgumentContentElements pArgumentContent;
	private final TextContainerElements pTextContainer;
	private final TextContentElements pTextContent;
	private final IdentifiersElements pIdentifiers;
	private final NumbersElements pNumbers;
	private final OperatorsElements pOperators;
	private final MathExpressionElements pMathExpression;
	private final InlineMathElements pInlineMath;
	private final DisplayMathElements pDisplayMath;
	private final MathContentElements pMathContent;
	private final TerminalRule tBS;
	private final TerminalRule tSYMBOL;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tSQBO;
	private final TerminalRule tSQBC;
	private final TerminalRule tCUBO;
	private final TerminalRule tCUBC;
	private final TerminalRule tNUMBER;
	private final TerminalRule tINT;
	private final TerminalRule tID;
	private final TerminalRule tWS;
	private final TerminalRule tTEXT;
	
	private final Grammar grammar;

	@Inject
	public TexDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pElement = new ElementElements();
		this.pCommand = new CommandElements();
		this.pOptionalArgument = new OptionalArgumentElements();
		this.pMandatoryArgument = new MandatoryArgumentElements();
		this.pCodeblock = new CodeblockElements();
		this.pCodeblockContent = new CodeblockContentElements();
		this.pCodeblockElement = new CodeblockElementElements();
		this.pAnyToken = new AnyTokenElements();
		this.pArgumentContent = new ArgumentContentElements();
		this.pTextContainer = new TextContainerElements();
		this.pTextContent = new TextContentElements();
		this.pIdentifiers = new IdentifiersElements();
		this.pNumbers = new NumbersElements();
		this.pOperators = new OperatorsElements();
		this.pMathExpression = new MathExpressionElements();
		this.pInlineMath = new InlineMathElements();
		this.pDisplayMath = new DisplayMathElements();
		this.pMathContent = new MathContentElements();
		this.tBS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.BS");
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.SYMBOL");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.SL_COMMENT");
		this.tSQBO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.SQBO");
		this.tSQBC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.SQBC");
		this.tCUBO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.CUBO");
		this.tCUBC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.CUBC");
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.NUMBER");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.INT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.ID");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.WS");
		this.tTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.TEXT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xixum.latex.TexDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//    elements+=Element*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Element:
	//    Command | TextContent | MathExpression | Codeblock;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Command:
	//    ->BS command=ID
	//    optionalArgs+=OptionalArgument*
	//    mandatoryArgs+=MandatoryArgument*
	//;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//OptionalArgument:
	//    {OptionalArgument} SQBO content+=ArgumentContent* SQBC;
	public OptionalArgumentElements getOptionalArgumentAccess() {
		return pOptionalArgument;
	}
	
	public ParserRule getOptionalArgumentRule() {
		return getOptionalArgumentAccess().getRule();
	}
	
	//MandatoryArgument:
	//    {MandatoryArgument} CUBO content+=ArgumentContent* CUBC;
	public MandatoryArgumentElements getMandatoryArgumentAccess() {
		return pMandatoryArgument;
	}
	
	public ParserRule getMandatoryArgumentRule() {
		return getMandatoryArgumentAccess().getRule();
	}
	
	//Codeblock:
	//    BS ->'begin{codeblock}'
	//    content=CodeblockContent
	//    BS ->'end{codeblock}';
	public CodeblockElements getCodeblockAccess() {
		return pCodeblock;
	}
	
	public ParserRule getCodeblockRule() {
		return getCodeblockAccess().getRule();
	}
	
	//CodeblockContent:
	//    {CodeblockContent} (elements+=CodeblockElement)*;
	public CodeblockContentElements getCodeblockContentAccess() {
		return pCodeblockContent;
	}
	
	public ParserRule getCodeblockContentRule() {
		return getCodeblockContentAccess().getRule();
	}
	
	//CodeblockElement:
	//    {CodeblockElement} AnyToken | Command;
	public CodeblockElementElements getCodeblockElementAccess() {
		return pCodeblockElement;
	}
	
	public ParserRule getCodeblockElementRule() {
		return getCodeblockElementAccess().getRule();
	}
	
	//AnyToken:
	//    ID | TEXT | SYMBOL | NUMBER | SQBO | SQBC | CUBO | CUBC | BS+;
	public AnyTokenElements getAnyTokenAccess() {
		return pAnyToken;
	}
	
	public ParserRule getAnyTokenRule() {
		return getAnyTokenAccess().getRule();
	}
	
	//ArgumentContent:
	//    TextContent | Command | MathExpression;
	public ArgumentContentElements getArgumentContentAccess() {
		return pArgumentContent;
	}
	
	public ParserRule getArgumentContentRule() {
		return getArgumentContentAccess().getRule();
	}
	
	//TextContainer:
	//    text+=TEXT+;
	public TextContainerElements getTextContainerAccess() {
		return pTextContainer;
	}
	
	public ParserRule getTextContainerRule() {
		return getTextContainerAccess().getRule();
	}
	
	//TextContent:
	//    Identifiers | TextContainer | Operators | Numbers | OptionalArgument | MandatoryArgument
	//;
	public TextContentElements getTextContentAccess() {
		return pTextContent;
	}
	
	public ParserRule getTextContentRule() {
		return getTextContentAccess().getRule();
	}
	
	//Identifiers:
	//    id=ID
	//;
	public IdentifiersElements getIdentifiersAccess() {
		return pIdentifiers;
	}
	
	public ParserRule getIdentifiersRule() {
		return getIdentifiersAccess().getRule();
	}
	
	//Numbers:
	//    num=NUMBER
	//;
	public NumbersElements getNumbersAccess() {
		return pNumbers;
	}
	
	public ParserRule getNumbersRule() {
		return getNumbersAccess().getRule();
	}
	
	//Operators:
	//    op+=SYMBOL+
	//;
	public OperatorsElements getOperatorsAccess() {
		return pOperators;
	}
	
	public ParserRule getOperatorsRule() {
		return getOperatorsAccess().getRule();
	}
	
	//MathExpression:
	//    InlineMath | DisplayMath;
	public MathExpressionElements getMathExpressionAccess() {
		return pMathExpression;
	}
	
	public ParserRule getMathExpressionRule() {
		return getMathExpressionAccess().getRule();
	}
	
	//InlineMath:
	//    {InlineMath} '$' content+=MathContent* '$';
	public InlineMathElements getInlineMathAccess() {
		return pInlineMath;
	}
	
	public ParserRule getInlineMathRule() {
		return getInlineMathAccess().getRule();
	}
	
	//DisplayMath:
	//    {DisplayMath} '$$' content+=MathContent* '$$';
	public DisplayMathElements getDisplayMathAccess() {
		return pDisplayMath;
	}
	
	public ParserRule getDisplayMathRule() {
		return getDisplayMathAccess().getRule();
	}
	
	//MathContent:
	//    Command | TextContent | Numbers | Operators;
	public MathContentElements getMathContentAccess() {
		return pMathContent;
	}
	
	public ParserRule getMathContentRule() {
		return getMathContentAccess().getRule();
	}
	
	////terminal BEGIN_KW:
	////    'begin'
	////;
	////
	////terminal END_KW:
	////    'end'
	////;
	//terminal BS:
	//    '\\'
	//;
	public TerminalRule getBSRule() {
		return tBS;
	}
	
	////terminal BEGIN:
	////    BS BEGIN_KW
	////;
	////
	////terminal END:
	////    BS END_KW
	////;
	//terminal SYMBOL:
	//    ('+'|'-'|'='|'/'|'*'|'^'|'_'|'<'|'>'|'&'|'%'|'#');
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	}
	
	//terminal SL_COMMENT : '%' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal SQBO:
	//    '['
	//;
	public TerminalRule getSQBORule() {
		return tSQBO;
	}
	
	//terminal SQBC:
	//    ']'
	//;
	public TerminalRule getSQBCRule() {
		return tSQBC;
	}
	
	//terminal CUBO:
	//    '{'
	//;
	public TerminalRule getCUBORule() {
		return tCUBO;
	}
	
	//terminal CUBC:
	//    '}'
	//;
	public TerminalRule getCUBCRule() {
		return tCUBC;
	}
	
	//terminal NUMBER returns ecore::EBigDecimal:
	//    INT ('.' INT)?;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal TEXT:
	//    !('\\' | '$' | '{' | '}' | '[' | ']' | '^' | '_' | ' '|'\t'|'\r'|'\n')+;
	public TerminalRule getTEXTRule() {
		return tTEXT;
	}
}
