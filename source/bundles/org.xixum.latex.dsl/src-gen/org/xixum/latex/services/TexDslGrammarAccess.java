/*
 * generated by Xtext 2.33.0
 */
package org.xixum.latex.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TexDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Model");
		private final Assignment cDocumentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDocumentDocumentParserRuleCall_0 = (RuleCall)cDocumentAssignment.eContents().get(0);
		
		//Model:
		//    document+=Document;
		@Override public ParserRule getRule() { return rule; }
		
		//document+=Document
		public Assignment getDocumentAssignment() { return cDocumentAssignment; }
		
		//Document
		public RuleCall getDocumentDocumentParserRuleCall_0() { return cDocumentDocumentParserRuleCall_0; }
	}
	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Document");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cElementsAlternatives_0_0 = (Alternatives)cElementsAssignment_0.eContents().get(0);
		private final RuleCall cElementsTokenParserRuleCall_0_0_0 = (RuleCall)cElementsAlternatives_0_0.eContents().get(0);
		private final RuleCall cElementsCommandParserRuleCall_0_0_1 = (RuleCall)cElementsAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDocumentAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Document:
		//    elements += (Token | Command )+ | {Document} END;
		@Override public ParserRule getRule() { return rule; }
		
		//elements += (Token | Command )+ | {Document} END
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//elements += (Token | Command )+
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//(Token | Command )
		public Alternatives getElementsAlternatives_0_0() { return cElementsAlternatives_0_0; }
		
		//Token
		public RuleCall getElementsTokenParserRuleCall_0_0_0() { return cElementsTokenParserRuleCall_0_0_0; }
		
		//Command
		public RuleCall getElementsCommandParserRuleCall_0_0_1() { return cElementsCommandParserRuleCall_0_0_1; }
		
		//{Document} END
		public Group getGroup_1() { return cGroup_1; }
		
		//{Document}
		public Action getDocumentAction_1_0() { return cDocumentAction_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1_1() { return cENDTerminalRuleCall_1_1; }
	}
	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Token");
		private final Assignment cTokenAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTokenALPHA_NUMERICTerminalRuleCall_0 = (RuleCall)cTokenAssignment.eContents().get(0);
		
		//Token:
		//    token = ALPHA_NUMERIC
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//token = ALPHA_NUMERIC
		public Assignment getTokenAssignment() { return cTokenAssignment; }
		
		//ALPHA_NUMERIC
		public RuleCall getTokenALPHA_NUMERICTerminalRuleCall_0() { return cTokenALPHA_NUMERICTerminalRuleCall_0; }
	}
	public class ID_TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.ID_Token");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cALPHA_NUMERICTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ID_Token:
		//    ID | ALPHA_NUMERIC
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | ALPHA_NUMERIC
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//ALPHA_NUMERIC
		public RuleCall getALPHA_NUMERICTerminalRuleCall_1() { return cALPHA_NUMERICTerminalRuleCall_1; }
	}
	public class CommandNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.CommandName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeadingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeadingBSTerminalRuleCall_0_0 = (RuleCall)cLeadingAssignment_0.eContents().get(0);
		private final Assignment cCNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCNameALPHA_NUMERICTerminalRuleCall_1_0 = (RuleCall)cCNameAssignment_1.eContents().get(0);
		
		//CommandName hidden():
		//    leading=BS cName=ALPHA_NUMERIC
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//leading=BS cName=ALPHA_NUMERIC
		public Group getGroup() { return cGroup; }
		
		//leading=BS
		public Assignment getLeadingAssignment_0() { return cLeadingAssignment_0; }
		
		//BS
		public RuleCall getLeadingBSTerminalRuleCall_0_0() { return cLeadingBSTerminalRuleCall_0_0; }
		
		//cName=ALPHA_NUMERIC
		public Assignment getCNameAssignment_1() { return cCNameAssignment_1; }
		
		//ALPHA_NUMERIC
		public RuleCall getCNameALPHA_NUMERICTerminalRuleCall_1_0() { return cCNameALPHA_NUMERICTerminalRuleCall_1_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandCommandNameParserRuleCall_0_0 = (RuleCall)cCommandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSQBOTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cAttributesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttributesAttributesParserRuleCall_1_1_0 = (RuleCall)cAttributesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cKOMMATerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cAttributesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cAttributesAttributesParserRuleCall_1_2_1_0 = (RuleCall)cAttributesAssignment_1_2_1.eContents().get(0);
		private final RuleCall cSQBCTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCUBOTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypesID_TokenParserRuleCall_2_1_0 = (RuleCall)cTypesAssignment_2_1.eContents().get(0);
		private final RuleCall cCUBCTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//Command:
		//    command=CommandName (SQBO attributes+=Attributes (KOMMA attributes+=Attributes)* SQBC)? (CUBO types+=ID_Token+ CUBC)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//command=CommandName (SQBO attributes+=Attributes (KOMMA attributes+=Attributes)* SQBC)? (CUBO types+=ID_Token+ CUBC)?
		public Group getGroup() { return cGroup; }
		
		//command=CommandName
		public Assignment getCommandAssignment_0() { return cCommandAssignment_0; }
		
		//CommandName
		public RuleCall getCommandCommandNameParserRuleCall_0_0() { return cCommandCommandNameParserRuleCall_0_0; }
		
		//(SQBO attributes+=Attributes (KOMMA attributes+=Attributes)* SQBC)?
		public Group getGroup_1() { return cGroup_1; }
		
		//SQBO
		public RuleCall getSQBOTerminalRuleCall_1_0() { return cSQBOTerminalRuleCall_1_0; }
		
		//attributes+=Attributes
		public Assignment getAttributesAssignment_1_1() { return cAttributesAssignment_1_1; }
		
		//Attributes
		public RuleCall getAttributesAttributesParserRuleCall_1_1_0() { return cAttributesAttributesParserRuleCall_1_1_0; }
		
		//(KOMMA attributes+=Attributes)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//KOMMA
		public RuleCall getKOMMATerminalRuleCall_1_2_0() { return cKOMMATerminalRuleCall_1_2_0; }
		
		//attributes+=Attributes
		public Assignment getAttributesAssignment_1_2_1() { return cAttributesAssignment_1_2_1; }
		
		//Attributes
		public RuleCall getAttributesAttributesParserRuleCall_1_2_1_0() { return cAttributesAttributesParserRuleCall_1_2_1_0; }
		
		//SQBC
		public RuleCall getSQBCTerminalRuleCall_1_3() { return cSQBCTerminalRuleCall_1_3; }
		
		//(CUBO types+=ID_Token+ CUBC)?
		public Group getGroup_2() { return cGroup_2; }
		
		//CUBO
		public RuleCall getCUBOTerminalRuleCall_2_0() { return cCUBOTerminalRuleCall_2_0; }
		
		//types+=ID_Token+
		public Assignment getTypesAssignment_2_1() { return cTypesAssignment_2_1; }
		
		//ID_Token
		public RuleCall getTypesID_TokenParserRuleCall_2_1_0() { return cTypesID_TokenParserRuleCall_2_1_0; }
		
		//CUBC
		public RuleCall getCUBCTerminalRuleCall_2_2() { return cCUBCTerminalRuleCall_2_2; }
	}
	public class AttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Attributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyID_TokenParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cEQTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cValueID_TokenParserRuleCall_1_1_0_0 = (RuleCall)cValueAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cCUBOTerminalRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Assignment cMultiValueAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cMultiValueID_TokenParserRuleCall_1_1_1_1_0 = (RuleCall)cMultiValueAssignment_1_1_1_1.eContents().get(0);
		private final RuleCall cCUBCTerminalRuleCall_1_1_1_2 = (RuleCall)cGroup_1_1_1.eContents().get(2);
		
		//Attributes:
		//    key=ID_Token ( EQ (value=ID_Token | (CUBO multiValue+=ID_Token+ CUBC)))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID_Token ( EQ (value=ID_Token | (CUBO multiValue+=ID_Token+ CUBC)))?
		public Group getGroup() { return cGroup; }
		
		//key=ID_Token
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID_Token
		public RuleCall getKeyID_TokenParserRuleCall_0_0() { return cKeyID_TokenParserRuleCall_0_0; }
		
		//( EQ (value=ID_Token | (CUBO multiValue+=ID_Token+ CUBC)))?
		public Group getGroup_1() { return cGroup_1; }
		
		//EQ
		public RuleCall getEQTerminalRuleCall_1_0() { return cEQTerminalRuleCall_1_0; }
		
		//(value=ID_Token | (CUBO multiValue+=ID_Token+ CUBC))
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//value=ID_Token
		public Assignment getValueAssignment_1_1_0() { return cValueAssignment_1_1_0; }
		
		//ID_Token
		public RuleCall getValueID_TokenParserRuleCall_1_1_0_0() { return cValueID_TokenParserRuleCall_1_1_0_0; }
		
		//(CUBO multiValue+=ID_Token+ CUBC)
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//CUBO
		public RuleCall getCUBOTerminalRuleCall_1_1_1_0() { return cCUBOTerminalRuleCall_1_1_1_0; }
		
		//multiValue+=ID_Token+
		public Assignment getMultiValueAssignment_1_1_1_1() { return cMultiValueAssignment_1_1_1_1; }
		
		//ID_Token
		public RuleCall getMultiValueID_TokenParserRuleCall_1_1_1_1_0() { return cMultiValueID_TokenParserRuleCall_1_1_1_1_0; }
		
		//CUBC
		public RuleCall getCUBCTerminalRuleCall_1_1_1_2() { return cCUBCTerminalRuleCall_1_1_1_2; }
	}
	
	
	private final ModelElements pModel;
	private final DocumentElements pDocument;
	private final TokenElements pToken;
	private final ID_TokenElements pID_Token;
	private final CommandNameElements pCommandName;
	private final CommandElements pCommand;
	private final AttributesElements pAttributes;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tBS;
	private final TerminalRule tSYMBOLS;
	private final TerminalRule tALPHA_NUMERIC;
	private final TerminalRule tID;
	private final TerminalRule tALPHA;
	private final TerminalRule tALPHAC;
	private final TerminalRule tALPHAS;
	private final TerminalRule tNUMERIC;
	private final TerminalRule tSQBO;
	private final TerminalRule tSQBC;
	private final TerminalRule tBO;
	private final TerminalRule tBC;
	private final TerminalRule tCUBO;
	private final TerminalRule tCUBC;
	private final TerminalRule tKOMMA;
	private final TerminalRule tEQ;
	private final TerminalRule tDOT;
	private final TerminalRule tAND;
	private final TerminalRule tSYMBOL;
	private final TerminalRule tEND;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TexDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDocument = new DocumentElements();
		this.pToken = new TokenElements();
		this.pID_Token = new ID_TokenElements();
		this.pCommandName = new CommandNameElements();
		this.pCommand = new CommandElements();
		this.pAttributes = new AttributesElements();
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.SL_COMMENT");
		this.tBS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.BS");
		this.tSYMBOLS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.SYMBOLS");
		this.tALPHA_NUMERIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.ALPHA_NUMERIC");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.ID");
		this.tALPHA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.ALPHA");
		this.tALPHAC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.ALPHAC");
		this.tALPHAS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.ALPHAS");
		this.tNUMERIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.NUMERIC");
		this.tSQBO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.SQBO");
		this.tSQBC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.SQBC");
		this.tBO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.BO");
		this.tBC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.BC");
		this.tCUBO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.CUBO");
		this.tCUBC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.CUBC");
		this.tKOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.KOMMA");
		this.tEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.EQ");
		this.tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.DOT");
		this.tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.AND");
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.SYMBOL");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.END");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xixum.latex.TexDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    document+=Document;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Document:
	//    elements += (Token | Command )+ | {Document} END;
	public DocumentElements getDocumentAccess() {
		return pDocument;
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}
	
	//Token:
	//    token = ALPHA_NUMERIC
	//;
	public TokenElements getTokenAccess() {
		return pToken;
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}
	
	//ID_Token:
	//    ID | ALPHA_NUMERIC
	//;
	public ID_TokenElements getID_TokenAccess() {
		return pID_Token;
	}
	
	public ParserRule getID_TokenRule() {
		return getID_TokenAccess().getRule();
	}
	
	//CommandName hidden():
	//    leading=BS cName=ALPHA_NUMERIC
	//;
	public CommandNameElements getCommandNameAccess() {
		return pCommandName;
	}
	
	public ParserRule getCommandNameRule() {
		return getCommandNameAccess().getRule();
	}
	
	//Command:
	//    command=CommandName (SQBO attributes+=Attributes (KOMMA attributes+=Attributes)* SQBC)? (CUBO types+=ID_Token+ CUBC)?
	//;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Attributes:
	//    key=ID_Token ( EQ (value=ID_Token | (CUBO multiValue+=ID_Token+ CUBC)))?
	//;
	public AttributesElements getAttributesAccess() {
		return pAttributes;
	}
	
	public ParserRule getAttributesRule() {
		return getAttributesAccess().getRule();
	}
	
	//@Override
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//@Override
	//terminal SL_COMMENT : '%' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal BS:
	//    '\\'
	//;
	public TerminalRule getBSRule() {
		return tBS;
	}
	
	//terminal SYMBOLS:
	//    SYMBOL+
	//;
	public TerminalRule getSYMBOLSRule() {
		return tSYMBOLS;
	}
	
	//terminal ALPHA_NUMERIC:
	//    ALPHA+ ( NUMERIC+ ALPHA+ )* NUMERIC*
	//;
	public TerminalRule getALPHA_NUMERICRule() {
		return tALPHA_NUMERIC;
	}
	
	//@Override
	//terminal ID:
	//    //ALPHA_NUMERIC ( SYMBOLS ALPHA_NUMERIC )* SYMBOLS?
	//    (ALPHA | SYMBOL ) (ALPHA |SYMBOL | NUMERIC | DOT | AND)*
	//;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal ALPHA:
	//    ALPHAC | ALPHAS
	//;
	public TerminalRule getALPHARule() {
		return tALPHA;
	}
	
	//terminal ALPHAC:
	//    'A'..'Z'| 'Ä'..'Ü' | 'À'..'Ù' | 'Á'..'Ú'
	//;
	public TerminalRule getALPHACRule() {
		return tALPHAC;
	}
	
	//terminal ALPHAS:
	//    'a'..'z' | 'ä'..'ü' | 'ß' | 'à'..'ù' | 'á'..'ú';
	public TerminalRule getALPHASRule() {
		return tALPHAS;
	}
	
	//terminal NUMERIC:
	//    '0'..'9'
	//;
	public TerminalRule getNUMERICRule() {
		return tNUMERIC;
	}
	
	//terminal SQBO:
	//    '['
	//;
	public TerminalRule getSQBORule() {
		return tSQBO;
	}
	
	//terminal SQBC:
	//    ']'
	//;
	public TerminalRule getSQBCRule() {
		return tSQBC;
	}
	
	//terminal BO:
	//    '('
	//;
	public TerminalRule getBORule() {
		return tBO;
	}
	
	//terminal BC:
	//    ')'
	//;
	public TerminalRule getBCRule() {
		return tBC;
	}
	
	//terminal CUBO:
	//    '{'
	//;
	public TerminalRule getCUBORule() {
		return tCUBO;
	}
	
	//terminal CUBC:
	//    '}'
	//;
	public TerminalRule getCUBCRule() {
		return tCUBC;
	}
	
	//terminal KOMMA:
	//    ','
	//;
	public TerminalRule getKOMMARule() {
		return tKOMMA;
	}
	
	//terminal EQ:
	//    '='
	//;
	public TerminalRule getEQRule() {
		return tEQ;
	}
	
	//terminal DOT:
	//    '.'
	//;
	public TerminalRule getDOTRule() {
		return tDOT;
	}
	
	//terminal AND:
	//    '&'
	//;
	public TerminalRule getANDRule() {
		return tAND;
	}
	
	//terminal SYMBOL:
	//    '-' | '_' | '+' | '#' | '~'
	//;
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	}
	
	//terminal END:
	//    EOF;
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
