/*
 * generated by Xtext 2.33.0
 */
package org.xixum.latex.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TexDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//    elements+=Element*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Element*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_0() { return cElementsElementParserRuleCall_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnvironmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTextContentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMathExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Element:
		//    Command | Environment | TextContent | MathExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//Command | Environment | TextContent | MathExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Command
		public RuleCall getCommandParserRuleCall_0() { return cCommandParserRuleCall_0; }
		
		//Environment
		public RuleCall getEnvironmentParserRuleCall_1() { return cEnvironmentParserRuleCall_1; }
		
		//TextContent
		public RuleCall getTextContentParserRuleCall_2() { return cTextContentParserRuleCall_2; }
		
		//MathExpression
		public RuleCall getMathExpressionParserRuleCall_3() { return cMathExpressionParserRuleCall_3; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackslashKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cOptionalArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOptionalArgsOptionalArgumentParserRuleCall_2_0 = (RuleCall)cOptionalArgsAssignment_2.eContents().get(0);
		private final Assignment cMandatoryArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMandatoryArgsMandatoryArgumentParserRuleCall_3_0 = (RuleCall)cMandatoryArgsAssignment_3.eContents().get(0);
		
		//Command:
		//    '\\' name=ID
		//    optionalArgs+=OptionalArgument*
		//    mandatoryArgs+=MandatoryArgument*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'\\' name=ID
		//optionalArgs+=OptionalArgument*
		//mandatoryArgs+=MandatoryArgument*
		public Group getGroup() { return cGroup; }
		
		//'\\'
		public Keyword getBackslashKeyword_0() { return cBackslashKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//optionalArgs+=OptionalArgument*
		public Assignment getOptionalArgsAssignment_2() { return cOptionalArgsAssignment_2; }
		
		//OptionalArgument
		public RuleCall getOptionalArgsOptionalArgumentParserRuleCall_2_0() { return cOptionalArgsOptionalArgumentParserRuleCall_2_0; }
		
		//mandatoryArgs+=MandatoryArgument*
		public Assignment getMandatoryArgsAssignment_3() { return cMandatoryArgsAssignment_3; }
		
		//MandatoryArgument
		public RuleCall getMandatoryArgsMandatoryArgumentParserRuleCall_3_0() { return cMandatoryArgsMandatoryArgumentParserRuleCall_3_0; }
	}
	public class OptionalArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.OptionalArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentArgumentContentParserRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//OptionalArgument:
		//    '[' content+=ArgumentContent+ ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' content+=ArgumentContent+ ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//content+=ArgumentContent+
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }
		
		//ArgumentContent
		public RuleCall getContentArgumentContentParserRuleCall_1_0() { return cContentArgumentContentParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class MandatoryArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.MandatoryArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentArgumentContentParserRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MandatoryArgument:
		//    '{' content+=ArgumentContent+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' content+=ArgumentContent+ '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//content+=ArgumentContent+
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }
		
		//ArgumentContent
		public RuleCall getContentArgumentContentParserRuleCall_1_0() { return cContentArgumentContentParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Environment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentElementParserRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEndTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEndTypeIDTerminalRuleCall_5_0 = (RuleCall)cEndTypeAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Environment:
		//    '\\begin{' type=ID '}'
		//    content+=Element*
		//    '\\end{' endType=ID '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'\\begin{' type=ID '}'
		//content+=Element*
		//'\\end{' endType=ID '}'
		public Group getGroup() { return cGroup; }
		
		//'\\begin{'
		public Keyword getBeginKeyword_0() { return cBeginKeyword_0; }
		
		//type=ID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0() { return cTypeIDTerminalRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
		
		//content+=Element*
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }
		
		//Element
		public RuleCall getContentElementParserRuleCall_3_0() { return cContentElementParserRuleCall_3_0; }
		
		//'\\end{'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
		
		//endType=ID
		public Assignment getEndTypeAssignment_5() { return cEndTypeAssignment_5; }
		
		//ID
		public RuleCall getEndTypeIDTerminalRuleCall_5_0() { return cEndTypeIDTerminalRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ArgumentContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.ArgumentContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextContentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMathExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnvironmentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ArgumentContent:
		//    TextContent | Command | MathExpression | Environment;
		@Override public ParserRule getRule() { return rule; }
		
		//TextContent | Command | MathExpression | Environment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TextContent
		public RuleCall getTextContentParserRuleCall_0() { return cTextContentParserRuleCall_0; }
		
		//Command
		public RuleCall getCommandParserRuleCall_1() { return cCommandParserRuleCall_1; }
		
		//MathExpression
		public RuleCall getMathExpressionParserRuleCall_2() { return cMathExpressionParserRuleCall_2; }
		
		//Environment
		public RuleCall getEnvironmentParserRuleCall_3() { return cEnvironmentParserRuleCall_3; }
	}
	public class TextContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.TextContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextContentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextTEXTTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//TextContent:
		//    {TextContent} text+=TEXT*;
		@Override public ParserRule getRule() { return rule; }
		
		//{TextContent} text+=TEXT*
		public Group getGroup() { return cGroup; }
		
		//{TextContent}
		public Action getTextContentAction_0() { return cTextContentAction_0; }
		
		//text+=TEXT*
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//TEXT
		public RuleCall getTextTEXTTerminalRuleCall_1_0() { return cTextTEXTTerminalRuleCall_1_0; }
	}
	public class MathExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.MathExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInlineMathParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDisplayMathParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MathExpression:
		//    InlineMath | DisplayMath;
		@Override public ParserRule getRule() { return rule; }
		
		//InlineMath | DisplayMath
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InlineMath
		public RuleCall getInlineMathParserRuleCall_0() { return cInlineMathParserRuleCall_0; }
		
		//DisplayMath
		public RuleCall getDisplayMathParserRuleCall_1() { return cDisplayMathParserRuleCall_1; }
	}
	public class InlineMathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.InlineMath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInlineMathAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDollarSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentMathContentParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cDollarSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InlineMath:
		//    {InlineMath} '$' content+=MathContent* '$';
		@Override public ParserRule getRule() { return rule; }
		
		//{InlineMath} '$' content+=MathContent* '$'
		public Group getGroup() { return cGroup; }
		
		//{InlineMath}
		public Action getInlineMathAction_0() { return cInlineMathAction_0; }
		
		//'$'
		public Keyword getDollarSignKeyword_1() { return cDollarSignKeyword_1; }
		
		//content+=MathContent*
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//MathContent
		public RuleCall getContentMathContentParserRuleCall_2_0() { return cContentMathContentParserRuleCall_2_0; }
		
		//'$'
		public Keyword getDollarSignKeyword_3() { return cDollarSignKeyword_3; }
	}
	public class DisplayMathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.DisplayMath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDisplayMathAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDollarSignDollarSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentMathContentParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cDollarSignDollarSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DisplayMath:
		//    {DisplayMath} '$$' content+=MathContent* '$$';
		@Override public ParserRule getRule() { return rule; }
		
		//{DisplayMath} '$$' content+=MathContent* '$$'
		public Group getGroup() { return cGroup; }
		
		//{DisplayMath}
		public Action getDisplayMathAction_0() { return cDisplayMathAction_0; }
		
		//'$$'
		public Keyword getDollarSignDollarSignKeyword_1() { return cDollarSignDollarSignKeyword_1; }
		
		//content+=MathContent*
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//MathContent
		public RuleCall getContentMathContentParserRuleCall_2_0() { return cContentMathContentParserRuleCall_2_0; }
		
		//'$$'
		public Keyword getDollarSignDollarSignKeyword_3() { return cDollarSignDollarSignKeyword_3; }
	}
	public class MathContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.MathContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMathContentAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cTEXTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cMathContentAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cNUMBERTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cMathContentAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cSYMBOLTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//MathContent:
		//    Command | {MathContent} TEXT | {MathContent} NUMBER | {MathContent} SYMBOL;
		@Override public ParserRule getRule() { return rule; }
		
		//Command | {MathContent} TEXT | {MathContent} NUMBER | {MathContent} SYMBOL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Command
		public RuleCall getCommandParserRuleCall_0() { return cCommandParserRuleCall_0; }
		
		//{MathContent} TEXT
		public Group getGroup_1() { return cGroup_1; }
		
		//{MathContent}
		public Action getMathContentAction_1_0() { return cMathContentAction_1_0; }
		
		//TEXT
		public RuleCall getTEXTTerminalRuleCall_1_1() { return cTEXTTerminalRuleCall_1_1; }
		
		//{MathContent} NUMBER
		public Group getGroup_2() { return cGroup_2; }
		
		//{MathContent}
		public Action getMathContentAction_2_0() { return cMathContentAction_2_0; }
		
		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_2_1() { return cNUMBERTerminalRuleCall_2_1; }
		
		//{MathContent} SYMBOL
		public Group getGroup_3() { return cGroup_3; }
		
		//{MathContent}
		public Action getMathContentAction_3_0() { return cMathContentAction_3_0; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_3_1() { return cSYMBOLTerminalRuleCall_3_1; }
	}
	
	
	private final ModelElements pModel;
	private final ElementElements pElement;
	private final CommandElements pCommand;
	private final OptionalArgumentElements pOptionalArgument;
	private final MandatoryArgumentElements pMandatoryArgument;
	private final EnvironmentElements pEnvironment;
	private final ArgumentContentElements pArgumentContent;
	private final TextContentElements pTextContent;
	private final MathExpressionElements pMathExpression;
	private final InlineMathElements pInlineMath;
	private final DisplayMathElements pDisplayMath;
	private final MathContentElements pMathContent;
	private final TerminalRule tNUMBER;
	private final TerminalRule tSYMBOL;
	private final TerminalRule tTEXT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tINT;
	private final TerminalRule tID;
	private final TerminalRule tEND;
	
	private final Grammar grammar;

	@Inject
	public TexDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pElement = new ElementElements();
		this.pCommand = new CommandElements();
		this.pOptionalArgument = new OptionalArgumentElements();
		this.pMandatoryArgument = new MandatoryArgumentElements();
		this.pEnvironment = new EnvironmentElements();
		this.pArgumentContent = new ArgumentContentElements();
		this.pTextContent = new TextContentElements();
		this.pMathExpression = new MathExpressionElements();
		this.pInlineMath = new InlineMathElements();
		this.pDisplayMath = new DisplayMathElements();
		this.pMathContent = new MathContentElements();
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.NUMBER");
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.SYMBOL");
		this.tTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.TEXT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.WS");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.INT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.ID");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.END");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xixum.latex.TexDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//    elements+=Element*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Element:
	//    Command | Environment | TextContent | MathExpression;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Command:
	//    '\\' name=ID
	//    optionalArgs+=OptionalArgument*
	//    mandatoryArgs+=MandatoryArgument*
	//;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//OptionalArgument:
	//    '[' content+=ArgumentContent+ ']';
	public OptionalArgumentElements getOptionalArgumentAccess() {
		return pOptionalArgument;
	}
	
	public ParserRule getOptionalArgumentRule() {
		return getOptionalArgumentAccess().getRule();
	}
	
	//MandatoryArgument:
	//    '{' content+=ArgumentContent+ '}';
	public MandatoryArgumentElements getMandatoryArgumentAccess() {
		return pMandatoryArgument;
	}
	
	public ParserRule getMandatoryArgumentRule() {
		return getMandatoryArgumentAccess().getRule();
	}
	
	//Environment:
	//    '\\begin{' type=ID '}'
	//    content+=Element*
	//    '\\end{' endType=ID '}';
	public EnvironmentElements getEnvironmentAccess() {
		return pEnvironment;
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}
	
	//ArgumentContent:
	//    TextContent | Command | MathExpression | Environment;
	public ArgumentContentElements getArgumentContentAccess() {
		return pArgumentContent;
	}
	
	public ParserRule getArgumentContentRule() {
		return getArgumentContentAccess().getRule();
	}
	
	//TextContent:
	//    {TextContent} text+=TEXT*;
	public TextContentElements getTextContentAccess() {
		return pTextContent;
	}
	
	public ParserRule getTextContentRule() {
		return getTextContentAccess().getRule();
	}
	
	//MathExpression:
	//    InlineMath | DisplayMath;
	public MathExpressionElements getMathExpressionAccess() {
		return pMathExpression;
	}
	
	public ParserRule getMathExpressionRule() {
		return getMathExpressionAccess().getRule();
	}
	
	//InlineMath:
	//    {InlineMath} '$' content+=MathContent* '$';
	public InlineMathElements getInlineMathAccess() {
		return pInlineMath;
	}
	
	public ParserRule getInlineMathRule() {
		return getInlineMathAccess().getRule();
	}
	
	//DisplayMath:
	//    {DisplayMath} '$$' content+=MathContent* '$$';
	public DisplayMathElements getDisplayMathAccess() {
		return pDisplayMath;
	}
	
	public ParserRule getDisplayMathRule() {
		return getDisplayMathAccess().getRule();
	}
	
	//MathContent:
	//    Command | {MathContent} TEXT | {MathContent} NUMBER | {MathContent} SYMBOL;
	public MathContentElements getMathContentAccess() {
		return pMathContent;
	}
	
	public ParserRule getMathContentRule() {
		return getMathContentAccess().getRule();
	}
	
	//terminal NUMBER returns ecore::EBigDecimal:
	//    INT ('.' INT)?;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal SYMBOL:
	//    ('+'|'-'|'='|'/'|'*'|'^'|'_'|'<'|'>'|'&'|'%'|'#');
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	}
	
	//terminal TEXT:
	//    !('\\' | '$' | '{' | '}' | '[' | ']' | '^' | '_' | ' '|'\t'|'\r'|'\n')+;
	public TerminalRule getTEXTRule() {
		return tTEXT;
	}
	
	//terminal SL_COMMENT : '%' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal END:
	//    EOF
	//;
	public TerminalRule getENDRule() {
		return tEND;
	}
}
