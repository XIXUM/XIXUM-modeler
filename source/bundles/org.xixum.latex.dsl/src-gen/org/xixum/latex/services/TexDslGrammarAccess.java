/*
 * generated by Xtext 2.33.0
 */
package org.xixum.latex.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TexDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Model");
		private final Assignment cDocumentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDocumentDocumentParserRuleCall_0 = (RuleCall)cDocumentAssignment.eContents().get(0);
		
		//Model:
		//    document+=Document+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//document+=Document+
		public Assignment getDocumentAssignment() { return cDocumentAssignment; }
		
		//Document
		public RuleCall getDocumentDocumentParserRuleCall_0() { return cDocumentDocumentParserRuleCall_0; }
	}
	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Document");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDocumentAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Document:
		//    Command | Text | {Document} END
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Command | Text | {Document} END
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Command
		public RuleCall getCommandParserRuleCall_0() { return cCommandParserRuleCall_0; }
		
		//Text
		public RuleCall getTextParserRuleCall_1() { return cTextParserRuleCall_1; }
		
		//{Document} END
		public Group getGroup_2() { return cGroup_2; }
		
		//{Document}
		public Action getDocumentAction_2_0() { return cDocumentAction_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_2_1() { return cENDTerminalRuleCall_2_1; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Text");
		private final Assignment cTokenAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTokenAnyTextParserRuleCall_0 = (RuleCall)cTokenAssignment.eContents().get(0);
		
		//Text:
		//    token += AnyText
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//token += AnyText
		public Assignment getTokenAssignment() { return cTokenAssignment; }
		
		//AnyText
		public RuleCall getTokenAnyTextParserRuleCall_0() { return cTokenAnyTextParserRuleCall_0; }
	}
	public class AnyTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.AnyText");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cKOMMATerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPIPETerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEXCLTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSYMBOLTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDOTTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//AnyText:
		//    ID | ANY_OTHER | KOMMA | PIPE | EXCL | SYMBOL | DOT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | ANY_OTHER | KOMMA | PIPE | EXCL | SYMBOL | DOT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1() { return cANY_OTHERTerminalRuleCall_1; }
		
		//KOMMA
		public RuleCall getKOMMATerminalRuleCall_2() { return cKOMMATerminalRuleCall_2; }
		
		//PIPE
		public RuleCall getPIPETerminalRuleCall_3() { return cPIPETerminalRuleCall_3; }
		
		//EXCL
		public RuleCall getEXCLTerminalRuleCall_4() { return cEXCLTerminalRuleCall_4; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_5() { return cSYMBOLTerminalRuleCall_5; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_6() { return cDOTTerminalRuleCall_6; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandID_COMMTerminalRuleCall_0_0 = (RuleCall)cCommandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSQBOTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cAttrsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttrsAttributesParserRuleCall_1_1_0 = (RuleCall)cAttrsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cKOMMATerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cAttrsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cAttrsAttributesParserRuleCall_1_2_1_0 = (RuleCall)cAttrsAssignment_1_2_1.eContents().get(0);
		private final RuleCall cSQBCTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCUBOTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cTokensAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTokensCompoundParserRuleCall_2_1_0 = (RuleCall)cTokensAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Alternatives cAlternatives_2_2_0 = (Alternatives)cGroup_2_2.eContents().get(0);
		private final RuleCall cPIPETerminalRuleCall_2_2_0_0 = (RuleCall)cAlternatives_2_2_0.eContents().get(0);
		private final RuleCall cEXCLTerminalRuleCall_2_2_0_1 = (RuleCall)cAlternatives_2_2_0.eContents().get(1);
		private final Assignment cTokensAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTokensCompoundParserRuleCall_2_2_1_0 = (RuleCall)cTokensAssignment_2_2_1.eContents().get(0);
		private final RuleCall cCUBCTerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		
		//Command:
		//    command=ID_COMM (SQBO attrs+=Attributes (KOMMA attrs+=Attributes)* SQBC)? (CUBO tokens+=Compound ((PIPE | EXCL) tokens+=Compound)* CUBC)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//command=ID_COMM (SQBO attrs+=Attributes (KOMMA attrs+=Attributes)* SQBC)? (CUBO tokens+=Compound ((PIPE | EXCL) tokens+=Compound)* CUBC)?
		public Group getGroup() { return cGroup; }
		
		//command=ID_COMM
		public Assignment getCommandAssignment_0() { return cCommandAssignment_0; }
		
		//ID_COMM
		public RuleCall getCommandID_COMMTerminalRuleCall_0_0() { return cCommandID_COMMTerminalRuleCall_0_0; }
		
		//(SQBO attrs+=Attributes (KOMMA attrs+=Attributes)* SQBC)?
		public Group getGroup_1() { return cGroup_1; }
		
		//SQBO
		public RuleCall getSQBOTerminalRuleCall_1_0() { return cSQBOTerminalRuleCall_1_0; }
		
		//attrs+=Attributes
		public Assignment getAttrsAssignment_1_1() { return cAttrsAssignment_1_1; }
		
		//Attributes
		public RuleCall getAttrsAttributesParserRuleCall_1_1_0() { return cAttrsAttributesParserRuleCall_1_1_0; }
		
		//(KOMMA attrs+=Attributes)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//KOMMA
		public RuleCall getKOMMATerminalRuleCall_1_2_0() { return cKOMMATerminalRuleCall_1_2_0; }
		
		//attrs+=Attributes
		public Assignment getAttrsAssignment_1_2_1() { return cAttrsAssignment_1_2_1; }
		
		//Attributes
		public RuleCall getAttrsAttributesParserRuleCall_1_2_1_0() { return cAttrsAttributesParserRuleCall_1_2_1_0; }
		
		//SQBC
		public RuleCall getSQBCTerminalRuleCall_1_3() { return cSQBCTerminalRuleCall_1_3; }
		
		//(CUBO tokens+=Compound ((PIPE | EXCL) tokens+=Compound)* CUBC)?
		public Group getGroup_2() { return cGroup_2; }
		
		//CUBO
		public RuleCall getCUBOTerminalRuleCall_2_0() { return cCUBOTerminalRuleCall_2_0; }
		
		//tokens+=Compound
		public Assignment getTokensAssignment_2_1() { return cTokensAssignment_2_1; }
		
		//Compound
		public RuleCall getTokensCompoundParserRuleCall_2_1_0() { return cTokensCompoundParserRuleCall_2_1_0; }
		
		//((PIPE | EXCL) tokens+=Compound)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//(PIPE | EXCL)
		public Alternatives getAlternatives_2_2_0() { return cAlternatives_2_2_0; }
		
		//PIPE
		public RuleCall getPIPETerminalRuleCall_2_2_0_0() { return cPIPETerminalRuleCall_2_2_0_0; }
		
		//EXCL
		public RuleCall getEXCLTerminalRuleCall_2_2_0_1() { return cEXCLTerminalRuleCall_2_2_0_1; }
		
		//tokens+=Compound
		public Assignment getTokensAssignment_2_2_1() { return cTokensAssignment_2_2_1; }
		
		//Compound
		public RuleCall getTokensCompoundParserRuleCall_2_2_1_0() { return cTokensCompoundParserRuleCall_2_2_1_0; }
		
		//CUBC
		public RuleCall getCUBCTerminalRuleCall_2_3() { return cCUBCTerminalRuleCall_2_3; }
	}
	public class MultiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Multi");
		private final Assignment cTokensAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTokensIDTerminalRuleCall_0 = (RuleCall)cTokensAssignment.eContents().get(0);
		
		//Multi:
		//    tokens+=ID+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//tokens+=ID+
		public Assignment getTokensAssignment() { return cTokensAssignment; }
		
		//ID
		public RuleCall getTokensIDTerminalRuleCall_0() { return cTokensIDTerminalRuleCall_0; }
	}
	public class CommandExtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.CommandExt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCommandAlternatives_0_0 = (Alternatives)cCommandAssignment_0.eContents().get(0);
		private final RuleCall cCommandIDTerminalRuleCall_0_0_0 = (RuleCall)cCommandAlternatives_0_0.eContents().get(0);
		private final RuleCall cCommandID_COMMTerminalRuleCall_0_0_1 = (RuleCall)cCommandAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCUBOTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cTokensAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTokensCompoundParserRuleCall_1_1_0 = (RuleCall)cTokensAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cKOMMATerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cTokensAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTokensCompoundParserRuleCall_1_2_1_0 = (RuleCall)cTokensAssignment_1_2_1.eContents().get(0);
		private final RuleCall cCUBCTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//CommandExt:
		//    command= (ID| ID_COMM) (CUBO tokens+=Compound (KOMMA tokens+=Compound)* CUBC)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//command= (ID| ID_COMM) (CUBO tokens+=Compound (KOMMA tokens+=Compound)* CUBC)
		public Group getGroup() { return cGroup; }
		
		//command= (ID| ID_COMM)
		public Assignment getCommandAssignment_0() { return cCommandAssignment_0; }
		
		//(ID| ID_COMM)
		public Alternatives getCommandAlternatives_0_0() { return cCommandAlternatives_0_0; }
		
		//ID
		public RuleCall getCommandIDTerminalRuleCall_0_0_0() { return cCommandIDTerminalRuleCall_0_0_0; }
		
		//ID_COMM
		public RuleCall getCommandID_COMMTerminalRuleCall_0_0_1() { return cCommandID_COMMTerminalRuleCall_0_0_1; }
		
		//(CUBO tokens+=Compound (KOMMA tokens+=Compound)* CUBC)
		public Group getGroup_1() { return cGroup_1; }
		
		//CUBO
		public RuleCall getCUBOTerminalRuleCall_1_0() { return cCUBOTerminalRuleCall_1_0; }
		
		//tokens+=Compound
		public Assignment getTokensAssignment_1_1() { return cTokensAssignment_1_1; }
		
		//Compound
		public RuleCall getTokensCompoundParserRuleCall_1_1_0() { return cTokensCompoundParserRuleCall_1_1_0; }
		
		//(KOMMA tokens+=Compound)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//KOMMA
		public RuleCall getKOMMATerminalRuleCall_1_2_0() { return cKOMMATerminalRuleCall_1_2_0; }
		
		//tokens+=Compound
		public Assignment getTokensAssignment_1_2_1() { return cTokensAssignment_1_2_1; }
		
		//Compound
		public RuleCall getTokensCompoundParserRuleCall_1_2_1_0() { return cTokensCompoundParserRuleCall_1_2_1_0; }
		
		//CUBC
		public RuleCall getCUBCTerminalRuleCall_1_3() { return cCUBCTerminalRuleCall_1_3; }
	}
	public class CompoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Compound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMultiParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExtrasParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCommandExtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Compound:
		//    Multi | Extras | =>CommandExt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Multi | Extras | =>CommandExt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Multi
		public RuleCall getMultiParserRuleCall_0() { return cMultiParserRuleCall_0; }
		
		//Extras
		public RuleCall getExtrasParserRuleCall_1() { return cExtrasParserRuleCall_1; }
		
		//=>CommandExt
		public RuleCall getCommandExtParserRuleCall_2() { return cCommandExtParserRuleCall_2; }
	}
	public class ExtrasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Extras");
		private final Assignment cTokensAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTokensAlternatives_0 = (Alternatives)cTokensAssignment.eContents().get(0);
		private final RuleCall cTokensBOTerminalRuleCall_0_0 = (RuleCall)cTokensAlternatives_0.eContents().get(0);
		private final RuleCall cTokensBCTerminalRuleCall_0_1 = (RuleCall)cTokensAlternatives_0.eContents().get(1);
		
		//Extras:
		//    tokens+= (BO | BC)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//tokens+= (BO | BC)+
		public Assignment getTokensAssignment() { return cTokensAssignment; }
		
		//(BO | BC)
		public Alternatives getTokensAlternatives_0() { return cTokensAlternatives_0; }
		
		//BO
		public RuleCall getTokensBOTerminalRuleCall_0_0() { return cTokensBOTerminalRuleCall_0_0; }
		
		//BC
		public RuleCall getTokensBCTerminalRuleCall_0_1() { return cTokensBCTerminalRuleCall_0_1; }
	}
	public class AttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.Attributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cEQTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cCUBOTerminalRuleCall_1_1_0_0 = (RuleCall)cGroup_1_1_0.eContents().get(0);
		private final Assignment cMultiAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cMultiMultiParserRuleCall_1_1_0_1_0 = (RuleCall)cMultiAssignment_1_1_0_1.eContents().get(0);
		private final RuleCall cCUBCTerminalRuleCall_1_1_0_2 = (RuleCall)cGroup_1_1_0.eContents().get(2);
		private final Assignment cSingleAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cSingleIDTerminalRuleCall_1_1_1_0 = (RuleCall)cSingleAssignment_1_1_1.eContents().get(0);
		
		//Attributes:
		//    key=ID (EQ (CUBO multi+=Multi+ CUBC | single=ID))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID (EQ (CUBO multi+=Multi+ CUBC | single=ID))?
		public Group getGroup() { return cGroup; }
		
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//(EQ (CUBO multi+=Multi+ CUBC | single=ID))?
		public Group getGroup_1() { return cGroup_1; }
		
		//EQ
		public RuleCall getEQTerminalRuleCall_1_0() { return cEQTerminalRuleCall_1_0; }
		
		//(CUBO multi+=Multi+ CUBC | single=ID)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//CUBO multi+=Multi+ CUBC
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//CUBO
		public RuleCall getCUBOTerminalRuleCall_1_1_0_0() { return cCUBOTerminalRuleCall_1_1_0_0; }
		
		//multi+=Multi+
		public Assignment getMultiAssignment_1_1_0_1() { return cMultiAssignment_1_1_0_1; }
		
		//Multi
		public RuleCall getMultiMultiParserRuleCall_1_1_0_1_0() { return cMultiMultiParserRuleCall_1_1_0_1_0; }
		
		//CUBC
		public RuleCall getCUBCTerminalRuleCall_1_1_0_2() { return cCUBCTerminalRuleCall_1_1_0_2; }
		
		//single=ID
		public Assignment getSingleAssignment_1_1_1() { return cSingleAssignment_1_1_1; }
		
		//ID
		public RuleCall getSingleIDTerminalRuleCall_1_1_1_0() { return cSingleIDTerminalRuleCall_1_1_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final DocumentElements pDocument;
	private final TextElements pText;
	private final AnyTextElements pAnyText;
	private final CommandElements pCommand;
	private final MultiElements pMulti;
	private final CommandExtElements pCommandExt;
	private final CompoundElements pCompound;
	private final ExtrasElements pExtras;
	private final AttributesElements pAttributes;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tID;
	private final TerminalRule tBS;
	private final TerminalRule tID_COMM;
	private final TerminalRule tALPHA;
	private final TerminalRule tALPHAC;
	private final TerminalRule tALPHAS;
	private final TerminalRule tNUMERIC;
	private final TerminalRule tSQBO;
	private final TerminalRule tSQBC;
	private final TerminalRule tBO;
	private final TerminalRule tBC;
	private final TerminalRule tCUBO;
	private final TerminalRule tCUBC;
	private final TerminalRule tKOMMA;
	private final TerminalRule tEQ;
	private final TerminalRule tDOT;
	private final TerminalRule tAND;
	private final TerminalRule tPIPE;
	private final TerminalRule tEXCL;
	private final TerminalRule tSPACE;
	private final TerminalRule tSYMBOL;
	private final TerminalRule tD_QUOTE;
	private final TerminalRule tS_QUOTE;
	private final TerminalRule tEND;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public TexDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pDocument = new DocumentElements();
		this.pText = new TextElements();
		this.pAnyText = new AnyTextElements();
		this.pCommand = new CommandElements();
		this.pMulti = new MultiElements();
		this.pCommandExt = new CommandExtElements();
		this.pCompound = new CompoundElements();
		this.pExtras = new ExtrasElements();
		this.pAttributes = new AttributesElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.SL_COMMENT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.ID");
		this.tBS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.BS");
		this.tID_COMM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.ID_COMM");
		this.tALPHA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.ALPHA");
		this.tALPHAC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.ALPHAC");
		this.tALPHAS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.ALPHAS");
		this.tNUMERIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.NUMERIC");
		this.tSQBO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.SQBO");
		this.tSQBC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.SQBC");
		this.tBO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.BO");
		this.tBC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.BC");
		this.tCUBO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.CUBO");
		this.tCUBC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.CUBC");
		this.tKOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.KOMMA");
		this.tEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.EQ");
		this.tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.DOT");
		this.tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.AND");
		this.tPIPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.PIPE");
		this.tEXCL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.EXCL");
		this.tSPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.SPACE");
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.SYMBOL");
		this.tD_QUOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.D_QUOTE");
		this.tS_QUOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.S_QUOTE");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.END");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xixum.latex.TexDsl.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xixum.latex.TexDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//    document+=Document+
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Document:
	//    Command | Text | {Document} END
	//;
	public DocumentElements getDocumentAccess() {
		return pDocument;
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}
	
	//Text:
	//    token += AnyText
	//;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//AnyText:
	//    ID | ANY_OTHER | KOMMA | PIPE | EXCL | SYMBOL | DOT
	//;
	public AnyTextElements getAnyTextAccess() {
		return pAnyText;
	}
	
	public ParserRule getAnyTextRule() {
		return getAnyTextAccess().getRule();
	}
	
	//Command:
	//    command=ID_COMM (SQBO attrs+=Attributes (KOMMA attrs+=Attributes)* SQBC)? (CUBO tokens+=Compound ((PIPE | EXCL) tokens+=Compound)* CUBC)?
	//;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Multi:
	//    tokens+=ID+
	//;
	public MultiElements getMultiAccess() {
		return pMulti;
	}
	
	public ParserRule getMultiRule() {
		return getMultiAccess().getRule();
	}
	
	//CommandExt:
	//    command= (ID| ID_COMM) (CUBO tokens+=Compound (KOMMA tokens+=Compound)* CUBC)
	//;
	public CommandExtElements getCommandExtAccess() {
		return pCommandExt;
	}
	
	public ParserRule getCommandExtRule() {
		return getCommandExtAccess().getRule();
	}
	
	//Compound:
	//    Multi | Extras | =>CommandExt
	//;
	public CompoundElements getCompoundAccess() {
		return pCompound;
	}
	
	public ParserRule getCompoundRule() {
		return getCompoundAccess().getRule();
	}
	
	//Extras:
	//    tokens+= (BO | BC)+
	//;
	public ExtrasElements getExtrasAccess() {
		return pExtras;
	}
	
	public ParserRule getExtrasRule() {
		return getExtrasAccess().getRule();
	}
	
	//Attributes:
	//    key=ID (EQ (CUBO multi+=Multi+ CUBC | single=ID))?
	//;
	public AttributesElements getAttributesAccess() {
		return pAttributes;
	}
	
	public ParserRule getAttributesRule() {
		return getAttributesAccess().getRule();
	}
	
	//terminal SL_COMMENT : '%' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal ID:
	//    (ALPHA | SYMBOL ) (ALPHA | SYMBOL | NUMERIC | DOT | AND)*
	//;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal BS:
	//    '\\'
	//;
	public TerminalRule getBSRule() {
		return tBS;
	}
	
	////terminal SYMBOLS:
	////    SYMBOL+
	////;
	////terminal ALPHA_NUMERIC:
	////    ALPHA+ ( NUMERIC+ ALPHA+ )* NUMERIC*
	////;
	//terminal ID_COMM:
	//    BS ID
	//;
	public TerminalRule getID_COMMRule() {
		return tID_COMM;
	}
	
	//terminal ALPHA:
	//    ALPHAC | ALPHAS | D_QUOTE | S_QUOTE
	//;
	public TerminalRule getALPHARule() {
		return tALPHA;
	}
	
	//terminal ALPHAC:
	//    'A'..'Z'| 'Ä'..'Ü' | 'À'..'Ù' | 'Á'..'Ú'
	//;
	public TerminalRule getALPHACRule() {
		return tALPHAC;
	}
	
	//terminal ALPHAS:
	//    'a'..'z' | 'ä'..'ü' | 'ß' | 'à'..'ù' | 'á'..'ú';
	public TerminalRule getALPHASRule() {
		return tALPHAS;
	}
	
	//terminal NUMERIC:
	//    '0'..'9'
	//;
	public TerminalRule getNUMERICRule() {
		return tNUMERIC;
	}
	
	//terminal SQBO:
	//    '['
	//;
	public TerminalRule getSQBORule() {
		return tSQBO;
	}
	
	//terminal SQBC:
	//    ']'
	//;
	public TerminalRule getSQBCRule() {
		return tSQBC;
	}
	
	//terminal BO:
	//    '('
	//;
	public TerminalRule getBORule() {
		return tBO;
	}
	
	//terminal BC:
	//    ')'
	//;
	public TerminalRule getBCRule() {
		return tBC;
	}
	
	//terminal CUBO:
	//    '{'
	//;
	public TerminalRule getCUBORule() {
		return tCUBO;
	}
	
	//terminal CUBC:
	//    '}'
	//;
	public TerminalRule getCUBCRule() {
		return tCUBC;
	}
	
	//terminal KOMMA:
	//    ','
	//;
	public TerminalRule getKOMMARule() {
		return tKOMMA;
	}
	
	//terminal EQ:
	//    '='
	//;
	public TerminalRule getEQRule() {
		return tEQ;
	}
	
	//terminal DOT:
	//    '.'
	//;
	public TerminalRule getDOTRule() {
		return tDOT;
	}
	
	//terminal AND:
	//    '&'
	//;
	public TerminalRule getANDRule() {
		return tAND;
	}
	
	//terminal PIPE:
	//    '|'
	//;
	public TerminalRule getPIPERule() {
		return tPIPE;
	}
	
	//terminal EXCL:
	//    '!'
	//;
	public TerminalRule getEXCLRule() {
		return tEXCL;
	}
	
	//terminal SPACE:
	//    ' '
	//;
	public TerminalRule getSPACERule() {
		return tSPACE;
	}
	
	//terminal SYMBOL:
	//    '-' | '_' | '+' | '#' | '~'
	//;
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	}
	
	//terminal D_QUOTE:
	//    '"'
	//;
	public TerminalRule getD_QUOTERule() {
		return tD_QUOTE;
	}
	
	//terminal S_QUOTE:
	//    "'"
	//;
	public TerminalRule getS_QUOTERule() {
		return tS_QUOTE;
	}
	
	//terminal END:
	//    EOF;
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal WS: (SPACE|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
